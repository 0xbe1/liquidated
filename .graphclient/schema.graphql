schema {
  query: Query
  subscription: Subscription
}

type Query {
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  rewardToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardToken
  rewardTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardToken_orderBy
    orderDirection: OrderDirection
    where: RewardToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RewardToken!]!
  usageMetricsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UsageMetricsDailySnapshot
  usageMetricsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: UsageMetricsDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: UsageMetricsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UsageMetricsDailySnapshot!]!
  financialsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FinancialsDailySnapshot
  financialsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: FinancialsDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: FinancialsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FinancialsDailySnapshot!]!
  lendingProtocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LendingProtocol
  lendingProtocols(
    skip: Int = 0
    first: Int = 100
    orderBy: LendingProtocol_orderBy
    orderDirection: OrderDirection
    where: LendingProtocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LendingProtocol!]!
  market(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Market
  markets(
    skip: Int = 0
    first: Int = 100
    orderBy: Market_orderBy
    orderDirection: OrderDirection
    where: Market_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Market!]!
  marketDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketDailySnapshot
  marketDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: MarketDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketDailySnapshot!]!
  deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposit
  deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Deposit_orderBy
    orderDirection: OrderDirection
    where: Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Deposit!]!
  withdraw(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Withdraw
  withdraws(
    skip: Int = 0
    first: Int = 100
    orderBy: Withdraw_orderBy
    orderDirection: OrderDirection
    where: Withdraw_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Withdraw!]!
  borrow(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Borrow
  borrows(
    skip: Int = 0
    first: Int = 100
    orderBy: Borrow_orderBy
    orderDirection: OrderDirection
    where: Borrow_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Borrow!]!
  repay(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Repay
  repays(
    skip: Int = 0
    first: Int = 100
    orderBy: Repay_orderBy
    orderDirection: OrderDirection
    where: Repay_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Repay!]!
  liquidate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Liquidate
  aavev2Liquidates(
    skip: Int = 0
    first: Int = 100
    orderBy: Liquidate_orderBy
    orderDirection: OrderDirection
    where: Liquidate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Liquidate!]!
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  dailyActiveAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DailyActiveAccount
  dailyActiveAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: DailyActiveAccount_orderBy
    orderDirection: OrderDirection
    where: DailyActiveAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DailyActiveAccount!]!
  protocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Protocol
  protocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Protocol_orderBy
    orderDirection: OrderDirection
    where: Protocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Protocol!]!
  event(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Event
  events(
    skip: Int = 0
    first: Int = 100
    orderBy: Event_orderBy
    orderDirection: OrderDirection
    where: Event_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Event!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  interestRate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): InterestRate
  interestRates(
    skip: Int = 0
    first: Int = 100
    orderBy: InterestRate_orderBy
    orderDirection: OrderDirection
    where: InterestRate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [InterestRate!]!
  usageMetricsHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UsageMetricsHourlySnapshot
  usageMetricsHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: UsageMetricsHourlySnapshot_orderBy
    orderDirection: OrderDirection
    where: UsageMetricsHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UsageMetricsHourlySnapshot!]!
  marketHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketHourlySnapshot
  marketHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketHourlySnapshot_orderBy
    orderDirection: OrderDirection
    where: MarketHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketHourlySnapshot!]!
  venusLiquidates(
    skip: Int = 0
    first: Int = 100
    orderBy: Liquidate_orderBy
    orderDirection: OrderDirection
    where: Liquidate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Liquidate!]!
  activeAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ActiveAccount
  activeAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: ActiveAccount_orderBy
    orderDirection: OrderDirection
    where: ActiveAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ActiveAccount!]!
  circularBuffer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): _CircularBuffer
  circularBuffers(
    skip: Int = 0
    first: Int = 100
    orderBy: _CircularBuffer_orderBy
    orderDirection: OrderDirection
    where: _CircularBuffer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [_CircularBuffer!]!
  compoundv2Liquidates(
    skip: Int = 0
    first: Int = 100
    orderBy: Liquidate_orderBy
    orderDirection: OrderDirection
    where: Liquidate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Liquidate!]!
}

type Subscription {
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  rewardToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardToken
  rewardTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardToken_orderBy
    orderDirection: OrderDirection
    where: RewardToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RewardToken!]!
  usageMetricsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UsageMetricsDailySnapshot
  usageMetricsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: UsageMetricsDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: UsageMetricsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UsageMetricsDailySnapshot!]!
  financialsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FinancialsDailySnapshot
  financialsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: FinancialsDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: FinancialsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FinancialsDailySnapshot!]!
  lendingProtocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LendingProtocol
  lendingProtocols(
    skip: Int = 0
    first: Int = 100
    orderBy: LendingProtocol_orderBy
    orderDirection: OrderDirection
    where: LendingProtocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LendingProtocol!]!
  market(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Market
  markets(
    skip: Int = 0
    first: Int = 100
    orderBy: Market_orderBy
    orderDirection: OrderDirection
    where: Market_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Market!]!
  marketDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketDailySnapshot
  marketDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: MarketDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketDailySnapshot!]!
  deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposit
  deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Deposit_orderBy
    orderDirection: OrderDirection
    where: Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Deposit!]!
  withdraw(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Withdraw
  withdraws(
    skip: Int = 0
    first: Int = 100
    orderBy: Withdraw_orderBy
    orderDirection: OrderDirection
    where: Withdraw_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Withdraw!]!
  borrow(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Borrow
  borrows(
    skip: Int = 0
    first: Int = 100
    orderBy: Borrow_orderBy
    orderDirection: OrderDirection
    where: Borrow_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Borrow!]!
  repay(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Repay
  repays(
    skip: Int = 0
    first: Int = 100
    orderBy: Repay_orderBy
    orderDirection: OrderDirection
    where: Repay_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Repay!]!
  liquidate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Liquidate
  liquidates(
    skip: Int = 0
    first: Int = 100
    orderBy: Liquidate_orderBy
    orderDirection: OrderDirection
    where: Liquidate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Liquidate!]!
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  dailyActiveAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DailyActiveAccount
  dailyActiveAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: DailyActiveAccount_orderBy
    orderDirection: OrderDirection
    where: DailyActiveAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DailyActiveAccount!]!
  protocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Protocol
  protocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Protocol_orderBy
    orderDirection: OrderDirection
    where: Protocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Protocol!]!
  event(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Event
  events(
    skip: Int = 0
    first: Int = 100
    orderBy: Event_orderBy
    orderDirection: OrderDirection
    where: Event_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Event!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  interestRate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): InterestRate
  interestRates(
    skip: Int = 0
    first: Int = 100
    orderBy: InterestRate_orderBy
    orderDirection: OrderDirection
    where: InterestRate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [InterestRate!]!
  usageMetricsHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UsageMetricsHourlySnapshot
  usageMetricsHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: UsageMetricsHourlySnapshot_orderBy
    orderDirection: OrderDirection
    where: UsageMetricsHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UsageMetricsHourlySnapshot!]!
  marketHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketHourlySnapshot
  marketHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketHourlySnapshot_orderBy
    orderDirection: OrderDirection
    where: MarketHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketHourlySnapshot!]!
  activeAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ActiveAccount
  activeAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: ActiveAccount_orderBy
    orderDirection: OrderDirection
    where: ActiveAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ActiveAccount!]!
  circularBuffer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): _CircularBuffer
  circularBuffers(
    skip: Int = 0
    first: Int = 100
    orderBy: _CircularBuffer_orderBy
    orderDirection: OrderDirection
    where: _CircularBuffer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [_CircularBuffer!]!
}

type Account {
  """ Address of the account """
  id: ID!
}

input Account_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Account_orderBy {
  id
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

type Borrow implements Event {
  """ { Transaction hash }-{ Log index } """
  id: ID!
  """ Transaction hash of the transaction that emitted this event """
  hash: String!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ The protocol this transaction belongs to """
  protocol: LendingProtocol!
  """ Address that received tokens """
  to: String!
  """ Market that tokens are borrowed from """
  from: String!
  """ The number of days since Unix epoch time, used to signify which financial/metric dailySnapshots this transaction is recorded in 
  """
  snapshotId: String!
  """ Block number of this event """
  blockNumber: BigInt!
  """ Timestamp of this event """
  timestamp: BigInt!
  """ The market this transaction interacted with """
  market: Market!
  """ Token borrowed """
  asset: Token!
  """ Amount of token borrowed in native units """
  amount: BigInt!
  """ Amount of token borrowed in USD """
  amountUSD: BigDecimal
}

input Borrow_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hash: String
  hash_not: String
  hash_gt: String
  hash_lt: String
  hash_gte: String
  hash_lte: String
  hash_in: [String!]
  hash_not_in: [String!]
  hash_contains: String
  hash_contains_nocase: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  snapshotId: String
  snapshotId_not: String
  snapshotId_gt: String
  snapshotId_lt: String
  snapshotId_gte: String
  snapshotId_lte: String
  snapshotId_in: [String!]
  snapshotId_not_in: [String!]
  snapshotId_contains: String
  snapshotId_contains_nocase: String
  snapshotId_not_contains: String
  snapshotId_not_contains_nocase: String
  snapshotId_starts_with: String
  snapshotId_starts_with_nocase: String
  snapshotId_not_starts_with: String
  snapshotId_not_starts_with_nocase: String
  snapshotId_ends_with: String
  snapshotId_ends_with_nocase: String
  snapshotId_not_ends_with: String
  snapshotId_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amountUSD: BigDecimal
  amountUSD_not: BigDecimal
  amountUSD_gt: BigDecimal
  amountUSD_lt: BigDecimal
  amountUSD_gte: BigDecimal
  amountUSD_lte: BigDecimal
  amountUSD_in: [BigDecimal!]
  amountUSD_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Borrow_orderBy {
  id
  hash
  logIndex
  protocol
  to
  from
  snapshotId
  blockNumber
  timestamp
  market
  asset
  amount
  amountUSD
}

scalar Bytes

type DailyActiveAccount {
  """ { Days since Unix epoch }-{ Address of the account } """
  id: ID!
}

input DailyActiveAccount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum DailyActiveAccount_orderBy {
  id
}

type Deposit implements Event {
  """ { Transaction hash }-{ Log index } """
  id: ID!
  """ Transaction hash of the transaction that emitted this event """
  hash: String!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ The protocol this transaction belongs to """
  protocol: LendingProtocol!
  """ Market that tokens are deposited into """
  to: String!
  """ Address that deposited tokens """
  from: String!
  """ The number of days since Unix epoch time, used to signify which financial/metric dailySnapshots this transaction is recorded in 
  """
  snapshotId: String!
  """ Block number of this event """
  blockNumber: BigInt!
  """ Timestamp of this event """
  timestamp: BigInt!
  """ The market this transaction interacted with """
  market: Market!
  """ Token deposited """
  asset: Token!
  """ Amount of token deposited in native units """
  amount: BigInt!
  """ Amount of token deposited in USD """
  amountUSD: BigDecimal!
}

input Deposit_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hash: String
  hash_not: String
  hash_gt: String
  hash_lt: String
  hash_gte: String
  hash_lte: String
  hash_in: [String!]
  hash_not_in: [String!]
  hash_contains: String
  hash_contains_nocase: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  snapshotId: String
  snapshotId_not: String
  snapshotId_gt: String
  snapshotId_lt: String
  snapshotId_gte: String
  snapshotId_lte: String
  snapshotId_in: [String!]
  snapshotId_not_in: [String!]
  snapshotId_contains: String
  snapshotId_contains_nocase: String
  snapshotId_not_contains: String
  snapshotId_not_contains_nocase: String
  snapshotId_starts_with: String
  snapshotId_starts_with_nocase: String
  snapshotId_not_starts_with: String
  snapshotId_not_starts_with_nocase: String
  snapshotId_ends_with: String
  snapshotId_ends_with_nocase: String
  snapshotId_not_ends_with: String
  snapshotId_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amountUSD: BigDecimal
  amountUSD_not: BigDecimal
  amountUSD_gt: BigDecimal
  amountUSD_lt: BigDecimal
  amountUSD_gte: BigDecimal
  amountUSD_lte: BigDecimal
  amountUSD_in: [BigDecimal!]
  amountUSD_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Deposit_orderBy {
  id
  hash
  logIndex
  protocol
  to
  from
  snapshotId
  blockNumber
  timestamp
  market
  asset
  amount
  amountUSD
}

"""
An event is any user action that occurs in a protocol. Generally, they are Ethereum events
emitted by a function in the smart contracts, stored in transaction receipts as event logs.
However, some user actions of interest are function calls that don't emit events. For example,
the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
store them as events, although they are not technically Ethereum events emitted by smart
contracts.

"""
interface Event {
  """ { Transaction hash }-{ Log index } """
  id: ID!
  """ Transaction hash of the transaction that emitted this event """
  hash: String!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ The protocol this transaction belongs to """
  protocol: LendingProtocol!
  """ Address that received the tokens """
  to: String!
  """ Address that sent the tokens """
  from: String!
  """ The number of days since Unix epoch time, used to signify which financial/metric dailySnapshots this transaction is recorded in 
  """
  snapshotId: String!
  """ Block number of this event """
  blockNumber: BigInt!
  """ Timestamp of this event """
  timestamp: BigInt!
}

input Event_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hash: String
  hash_not: String
  hash_gt: String
  hash_lt: String
  hash_gte: String
  hash_lte: String
  hash_in: [String!]
  hash_not_in: [String!]
  hash_contains: String
  hash_contains_nocase: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  snapshotId: String
  snapshotId_not: String
  snapshotId_gt: String
  snapshotId_lt: String
  snapshotId_gte: String
  snapshotId_lte: String
  snapshotId_in: [String!]
  snapshotId_not_in: [String!]
  snapshotId_contains: String
  snapshotId_contains_nocase: String
  snapshotId_not_contains: String
  snapshotId_not_contains_nocase: String
  snapshotId_starts_with: String
  snapshotId_starts_with_nocase: String
  snapshotId_not_starts_with: String
  snapshotId_not_starts_with_nocase: String
  snapshotId_ends_with: String
  snapshotId_ends_with_nocase: String
  snapshotId_not_ends_with: String
  snapshotId_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Event_orderBy {
  id
  hash
  logIndex
  protocol
  to
  from
  snapshotId
  blockNumber
  timestamp
}

type FinancialsDailySnapshot {
  """ ID is # of days since Unix epoch time """
  id: ID!
  """ Protocol this snapshot is associated with """
  protocol: LendingProtocol!
  """ Current TVL (Total Value Locked) of the entire protocol """
  totalValueLockedUSD: BigDecimal!
  """ Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. 
  """
  protocolControlledValueUSD: BigDecimal
  """ Total volume in USD """
  totalVolumeUSD: BigDecimal!
  """ Current balance of all deposited assets (not historical cumulative), in USD 
  """
  totalDepositUSD: BigDecimal!
  """ Current balance of all borrowed assets (not historical cumulative), in USD. In the case of CDPs, this will be all minted assets 
  """
  totalBorrowUSD: BigDecimal!
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  supplySideRevenueUSD: BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  protocolSideRevenueUSD: BigDecimal!
  """ Total revenue accrued by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  totalRevenueUSD: BigDecimal!
  """ Block number of this snapshot """
  blockNumber: BigInt!
  """ Timestamp of this snapshot """
  timestamp: BigInt!
  """ Total supply of minted tokens in native amounts, with same ordering as mintedTokens. Only applies to CDP 
  """
  mintedTokenSupplies: [BigInt!]
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  dailySupplySideRevenueUSD: BigDecimal!
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  cumulativeSupplySideRevenueUSD: BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  dailyProtocolSideRevenueUSD: BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  cumulativeProtocolSideRevenueUSD: BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  dailyTotalRevenueUSD: BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  cumulativeTotalRevenueUSD: BigDecimal!
  """ Current balance of all deposited assets, in USD. Note this metric should be the same as TVL. 
  """
  totalDepositBalanceUSD: BigDecimal!
  """ Total assets deposited on a given day, in USD """
  dailyDepositUSD: BigDecimal!
  """ Sum of all historical deposits in USD (only considers deposits and not withdrawals) 
  """
  cumulativeDepositUSD: BigDecimal!
  """ Current balance of all borrowed/minted assets, in USD. """
  totalBorrowBalanceUSD: BigDecimal!
  """ Total assets borrowed/minted on a given day, in USD. """
  dailyBorrowUSD: BigDecimal!
  """ Sum of all historical borrows/mints in USD (i.e. total loan origination). 
  """
  cumulativeBorrowUSD: BigDecimal!
  """ Total assets liquidated on a given day, in USD. """
  dailyLiquidateUSD: BigDecimal!
  """ Sum of all historical liquidations in USD """
  cumulativeLiquidateUSD: BigDecimal!
}

input FinancialsDailySnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  totalValueLockedUSD: BigDecimal
  totalValueLockedUSD_not: BigDecimal
  totalValueLockedUSD_gt: BigDecimal
  totalValueLockedUSD_lt: BigDecimal
  totalValueLockedUSD_gte: BigDecimal
  totalValueLockedUSD_lte: BigDecimal
  totalValueLockedUSD_in: [BigDecimal!]
  totalValueLockedUSD_not_in: [BigDecimal!]
  protocolControlledValueUSD: BigDecimal
  protocolControlledValueUSD_not: BigDecimal
  protocolControlledValueUSD_gt: BigDecimal
  protocolControlledValueUSD_lt: BigDecimal
  protocolControlledValueUSD_gte: BigDecimal
  protocolControlledValueUSD_lte: BigDecimal
  protocolControlledValueUSD_in: [BigDecimal!]
  protocolControlledValueUSD_not_in: [BigDecimal!]
  totalVolumeUSD: BigDecimal
  totalVolumeUSD_not: BigDecimal
  totalVolumeUSD_gt: BigDecimal
  totalVolumeUSD_lt: BigDecimal
  totalVolumeUSD_gte: BigDecimal
  totalVolumeUSD_lte: BigDecimal
  totalVolumeUSD_in: [BigDecimal!]
  totalVolumeUSD_not_in: [BigDecimal!]
  totalDepositUSD: BigDecimal
  totalDepositUSD_not: BigDecimal
  totalDepositUSD_gt: BigDecimal
  totalDepositUSD_lt: BigDecimal
  totalDepositUSD_gte: BigDecimal
  totalDepositUSD_lte: BigDecimal
  totalDepositUSD_in: [BigDecimal!]
  totalDepositUSD_not_in: [BigDecimal!]
  totalBorrowUSD: BigDecimal
  totalBorrowUSD_not: BigDecimal
  totalBorrowUSD_gt: BigDecimal
  totalBorrowUSD_lt: BigDecimal
  totalBorrowUSD_gte: BigDecimal
  totalBorrowUSD_lte: BigDecimal
  totalBorrowUSD_in: [BigDecimal!]
  totalBorrowUSD_not_in: [BigDecimal!]
  supplySideRevenueUSD: BigDecimal
  supplySideRevenueUSD_not: BigDecimal
  supplySideRevenueUSD_gt: BigDecimal
  supplySideRevenueUSD_lt: BigDecimal
  supplySideRevenueUSD_gte: BigDecimal
  supplySideRevenueUSD_lte: BigDecimal
  supplySideRevenueUSD_in: [BigDecimal!]
  supplySideRevenueUSD_not_in: [BigDecimal!]
  protocolSideRevenueUSD: BigDecimal
  protocolSideRevenueUSD_not: BigDecimal
  protocolSideRevenueUSD_gt: BigDecimal
  protocolSideRevenueUSD_lt: BigDecimal
  protocolSideRevenueUSD_gte: BigDecimal
  protocolSideRevenueUSD_lte: BigDecimal
  protocolSideRevenueUSD_in: [BigDecimal!]
  protocolSideRevenueUSD_not_in: [BigDecimal!]
  totalRevenueUSD: BigDecimal
  totalRevenueUSD_not: BigDecimal
  totalRevenueUSD_gt: BigDecimal
  totalRevenueUSD_lt: BigDecimal
  totalRevenueUSD_gte: BigDecimal
  totalRevenueUSD_lte: BigDecimal
  totalRevenueUSD_in: [BigDecimal!]
  totalRevenueUSD_not_in: [BigDecimal!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  mintedTokenSupplies: [BigInt!]
  mintedTokenSupplies_not: [BigInt!]
  mintedTokenSupplies_contains: [BigInt!]
  mintedTokenSupplies_contains_nocase: [BigInt!]
  mintedTokenSupplies_not_contains: [BigInt!]
  mintedTokenSupplies_not_contains_nocase: [BigInt!]
  dailySupplySideRevenueUSD: BigDecimal
  dailySupplySideRevenueUSD_not: BigDecimal
  dailySupplySideRevenueUSD_gt: BigDecimal
  dailySupplySideRevenueUSD_lt: BigDecimal
  dailySupplySideRevenueUSD_gte: BigDecimal
  dailySupplySideRevenueUSD_lte: BigDecimal
  dailySupplySideRevenueUSD_in: [BigDecimal!]
  dailySupplySideRevenueUSD_not_in: [BigDecimal!]
  cumulativeSupplySideRevenueUSD: BigDecimal
  cumulativeSupplySideRevenueUSD_not: BigDecimal
  cumulativeSupplySideRevenueUSD_gt: BigDecimal
  cumulativeSupplySideRevenueUSD_lt: BigDecimal
  cumulativeSupplySideRevenueUSD_gte: BigDecimal
  cumulativeSupplySideRevenueUSD_lte: BigDecimal
  cumulativeSupplySideRevenueUSD_in: [BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [BigDecimal!]
  dailyProtocolSideRevenueUSD: BigDecimal
  dailyProtocolSideRevenueUSD_not: BigDecimal
  dailyProtocolSideRevenueUSD_gt: BigDecimal
  dailyProtocolSideRevenueUSD_lt: BigDecimal
  dailyProtocolSideRevenueUSD_gte: BigDecimal
  dailyProtocolSideRevenueUSD_lte: BigDecimal
  dailyProtocolSideRevenueUSD_in: [BigDecimal!]
  dailyProtocolSideRevenueUSD_not_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD: BigDecimal
  cumulativeProtocolSideRevenueUSD_not: BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [BigDecimal!]
  dailyTotalRevenueUSD: BigDecimal
  dailyTotalRevenueUSD_not: BigDecimal
  dailyTotalRevenueUSD_gt: BigDecimal
  dailyTotalRevenueUSD_lt: BigDecimal
  dailyTotalRevenueUSD_gte: BigDecimal
  dailyTotalRevenueUSD_lte: BigDecimal
  dailyTotalRevenueUSD_in: [BigDecimal!]
  dailyTotalRevenueUSD_not_in: [BigDecimal!]
  cumulativeTotalRevenueUSD: BigDecimal
  cumulativeTotalRevenueUSD_not: BigDecimal
  cumulativeTotalRevenueUSD_gt: BigDecimal
  cumulativeTotalRevenueUSD_lt: BigDecimal
  cumulativeTotalRevenueUSD_gte: BigDecimal
  cumulativeTotalRevenueUSD_lte: BigDecimal
  cumulativeTotalRevenueUSD_in: [BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [BigDecimal!]
  totalDepositBalanceUSD: BigDecimal
  totalDepositBalanceUSD_not: BigDecimal
  totalDepositBalanceUSD_gt: BigDecimal
  totalDepositBalanceUSD_lt: BigDecimal
  totalDepositBalanceUSD_gte: BigDecimal
  totalDepositBalanceUSD_lte: BigDecimal
  totalDepositBalanceUSD_in: [BigDecimal!]
  totalDepositBalanceUSD_not_in: [BigDecimal!]
  dailyDepositUSD: BigDecimal
  dailyDepositUSD_not: BigDecimal
  dailyDepositUSD_gt: BigDecimal
  dailyDepositUSD_lt: BigDecimal
  dailyDepositUSD_gte: BigDecimal
  dailyDepositUSD_lte: BigDecimal
  dailyDepositUSD_in: [BigDecimal!]
  dailyDepositUSD_not_in: [BigDecimal!]
  cumulativeDepositUSD: BigDecimal
  cumulativeDepositUSD_not: BigDecimal
  cumulativeDepositUSD_gt: BigDecimal
  cumulativeDepositUSD_lt: BigDecimal
  cumulativeDepositUSD_gte: BigDecimal
  cumulativeDepositUSD_lte: BigDecimal
  cumulativeDepositUSD_in: [BigDecimal!]
  cumulativeDepositUSD_not_in: [BigDecimal!]
  totalBorrowBalanceUSD: BigDecimal
  totalBorrowBalanceUSD_not: BigDecimal
  totalBorrowBalanceUSD_gt: BigDecimal
  totalBorrowBalanceUSD_lt: BigDecimal
  totalBorrowBalanceUSD_gte: BigDecimal
  totalBorrowBalanceUSD_lte: BigDecimal
  totalBorrowBalanceUSD_in: [BigDecimal!]
  totalBorrowBalanceUSD_not_in: [BigDecimal!]
  dailyBorrowUSD: BigDecimal
  dailyBorrowUSD_not: BigDecimal
  dailyBorrowUSD_gt: BigDecimal
  dailyBorrowUSD_lt: BigDecimal
  dailyBorrowUSD_gte: BigDecimal
  dailyBorrowUSD_lte: BigDecimal
  dailyBorrowUSD_in: [BigDecimal!]
  dailyBorrowUSD_not_in: [BigDecimal!]
  cumulativeBorrowUSD: BigDecimal
  cumulativeBorrowUSD_not: BigDecimal
  cumulativeBorrowUSD_gt: BigDecimal
  cumulativeBorrowUSD_lt: BigDecimal
  cumulativeBorrowUSD_gte: BigDecimal
  cumulativeBorrowUSD_lte: BigDecimal
  cumulativeBorrowUSD_in: [BigDecimal!]
  cumulativeBorrowUSD_not_in: [BigDecimal!]
  dailyLiquidateUSD: BigDecimal
  dailyLiquidateUSD_not: BigDecimal
  dailyLiquidateUSD_gt: BigDecimal
  dailyLiquidateUSD_lt: BigDecimal
  dailyLiquidateUSD_gte: BigDecimal
  dailyLiquidateUSD_lte: BigDecimal
  dailyLiquidateUSD_in: [BigDecimal!]
  dailyLiquidateUSD_not_in: [BigDecimal!]
  cumulativeLiquidateUSD: BigDecimal
  cumulativeLiquidateUSD_not: BigDecimal
  cumulativeLiquidateUSD_gt: BigDecimal
  cumulativeLiquidateUSD_lt: BigDecimal
  cumulativeLiquidateUSD_gte: BigDecimal
  cumulativeLiquidateUSD_lte: BigDecimal
  cumulativeLiquidateUSD_in: [BigDecimal!]
  cumulativeLiquidateUSD_not_in: [BigDecimal!]
}

enum FinancialsDailySnapshot_orderBy {
  id
  protocol
  totalValueLockedUSD
  protocolControlledValueUSD
  totalVolumeUSD
  totalDepositUSD
  totalBorrowUSD
  supplySideRevenueUSD
  protocolSideRevenueUSD
  totalRevenueUSD
  blockNumber
  timestamp
  mintedTokenSupplies
  dailySupplySideRevenueUSD
  cumulativeSupplySideRevenueUSD
  dailyProtocolSideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  dailyTotalRevenueUSD
  cumulativeTotalRevenueUSD
  totalDepositBalanceUSD
  dailyDepositUSD
  cumulativeDepositUSD
  totalBorrowBalanceUSD
  dailyBorrowUSD
  cumulativeBorrowUSD
  dailyLiquidateUSD
  cumulativeLiquidateUSD
}

type LendingProtocol implements Protocol {
  """ Smart contract address of the protocol's main contract (Factory, Registry, etc) 
  """
  id: ID!
  """ Name of the protocol, including version. e.g. Aave v2 """
  name: String!
  """ Slug of protocol, including version. e.g. aave-v2 """
  slug: String!
  """ Version of the subgraph schema, in SemVer format (e.g. 1.0.0) """
  schemaVersion: String!
  """ Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) 
  """
  subgraphVersion: String!
  """ Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) 
  """
  methodologyVersion: String!
  """ The blockchain network this subgraph is indexing on """
  network: Network!
  """ The type of protocol (e.g. DEX, Lending, Yield, etc) """
  type: ProtocolType!
  """ String of the address of the current price oracle on the protocol """
  protocolPriceOracle: String!
  """ Number of total/cumulative unique users """
  totalUniqueUsers: Int!
  """ Total revenue in USD of all markets on the lending protocol """
  totalRevenueUSD: BigDecimal!
  """ Current TVL (Total Value Locked) of the entire protocol """
  totalValueLockedUSD: BigDecimal!
  """ The portion of the revenue allocated to the protocol """
  protocolSideRevenueUSD: BigDecimal!
  """ The portion of the revenue allocated to the suppliers (depositors) """
  supplySideRevenueUSD: BigDecimal!
  """ Total borrow volume in USD (i.e. total loan origination ) """
  totalVolumeUSD: BigDecimal!
  """ Current balance of all deposited assets (not historical cumulative), in USD 
  """
  totalDepositUSD: BigDecimal!
  """ Current balance of all borrowed assets (not historical cumulative), in USD. In the case of CDPs, this will be all minted assets 
  """
  totalBorrowUSD: BigDecimal!
  usageMetrics(skip: Int = 0, first: Int = 100, orderBy: UsageMetricsDailySnapshot_orderBy, orderDirection: OrderDirection, where: UsageMetricsDailySnapshot_filter): [UsageMetricsDailySnapshot!]!
  """ Daily financial metrics for this protocol """
  financialMetrics(skip: Int = 0, first: Int = 100, orderBy: FinancialsDailySnapshot_orderBy, orderDirection: OrderDirection, where: FinancialsDailySnapshot_filter): [FinancialsDailySnapshot!]!
  """ All markets that belong to this protocol """
  markets(skip: Int = 0, first: Int = 100, orderBy: Market_orderBy, orderDirection: OrderDirection, where: Market_filter): [Market!]!
  """ The specific lending protocol type """
  lendingType: LendingType
  """ Risk type of the lending protocol """
  riskType: RiskType
  """ Tokens that can be minted. Only applies to CDP """
  mintedTokens(skip: Int = 0, first: Int = 100, orderBy: Token_orderBy, orderDirection: OrderDirection, where: Token_filter): [Token!]
  """ # of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. 
  """
  protocolControlledValueUSD: BigDecimal
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  cumulativeSupplySideRevenueUSD: BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  cumulativeProtocolSideRevenueUSD: BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  cumulativeTotalRevenueUSD: BigDecimal!
  """ Current balance of all deposited assets, in USD. Note this metric should be the same as TVL. 
  """
  totalDepositBalanceUSD: BigDecimal!
  """ Sum of all historical deposits in USD (only considers deposits and not withdrawals) 
  """
  cumulativeDepositUSD: BigDecimal!
  """ Current balance of all borrowed/minted assets (not historical cumulative), in USD. 
  """
  totalBorrowBalanceUSD: BigDecimal!
  """ Sum of all historical borrows/mints in USD (i.e. total loan origination). 
  """
  cumulativeBorrowUSD: BigDecimal!
  """ Sum of all historical liquidations in USD """
  cumulativeLiquidateUSD: BigDecimal!
  """ Total supply of minted tokens in native amounts, with same ordering as mintedTokens. Only applies to CDP 
  """
  mintedTokenSupplies: [BigInt!]
  """ Daily usage metrics for this protocol """
  dailyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: UsageMetricsDailySnapshot_orderBy, orderDirection: OrderDirection, where: UsageMetricsDailySnapshot_filter): [UsageMetricsDailySnapshot!]!
  """ Hourly usage metrics for this protocol """
  hourlyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: UsageMetricsHourlySnapshot_orderBy, orderDirection: OrderDirection, where: UsageMetricsHourlySnapshot_filter): [UsageMetricsHourlySnapshot!]!
  """ Price Oracle used to calculate asset price in USD """
  _priceOracle: Bytes
  """ All markets that belong to this protocol. protocol.markets won't work, see https://github.com/graphprotocol/graph-ts/issues/219 
  """
  _marketIDs: [ID!]!
  _liquidationIncentive: BigDecimal!
  """ Store the ids of each market for easy iteration """
  _marketIds: [String!]!
  """ Liquidation penalty (the same for every market) """
  _liquidationPenalty: BigDecimal!
}

input LendingProtocol_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  slug: String
  slug_not: String
  slug_gt: String
  slug_lt: String
  slug_gte: String
  slug_lte: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_contains: String
  slug_contains_nocase: String
  slug_not_contains: String
  slug_not_contains_nocase: String
  slug_starts_with: String
  slug_starts_with_nocase: String
  slug_not_starts_with: String
  slug_not_starts_with_nocase: String
  slug_ends_with: String
  slug_ends_with_nocase: String
  slug_not_ends_with: String
  slug_not_ends_with_nocase: String
  schemaVersion: String
  schemaVersion_not: String
  schemaVersion_gt: String
  schemaVersion_lt: String
  schemaVersion_gte: String
  schemaVersion_lte: String
  schemaVersion_in: [String!]
  schemaVersion_not_in: [String!]
  schemaVersion_contains: String
  schemaVersion_contains_nocase: String
  schemaVersion_not_contains: String
  schemaVersion_not_contains_nocase: String
  schemaVersion_starts_with: String
  schemaVersion_starts_with_nocase: String
  schemaVersion_not_starts_with: String
  schemaVersion_not_starts_with_nocase: String
  schemaVersion_ends_with: String
  schemaVersion_ends_with_nocase: String
  schemaVersion_not_ends_with: String
  schemaVersion_not_ends_with_nocase: String
  subgraphVersion: String
  subgraphVersion_not: String
  subgraphVersion_gt: String
  subgraphVersion_lt: String
  subgraphVersion_gte: String
  subgraphVersion_lte: String
  subgraphVersion_in: [String!]
  subgraphVersion_not_in: [String!]
  subgraphVersion_contains: String
  subgraphVersion_contains_nocase: String
  subgraphVersion_not_contains: String
  subgraphVersion_not_contains_nocase: String
  subgraphVersion_starts_with: String
  subgraphVersion_starts_with_nocase: String
  subgraphVersion_not_starts_with: String
  subgraphVersion_not_starts_with_nocase: String
  subgraphVersion_ends_with: String
  subgraphVersion_ends_with_nocase: String
  subgraphVersion_not_ends_with: String
  subgraphVersion_not_ends_with_nocase: String
  methodologyVersion: String
  methodologyVersion_not: String
  methodologyVersion_gt: String
  methodologyVersion_lt: String
  methodologyVersion_gte: String
  methodologyVersion_lte: String
  methodologyVersion_in: [String!]
  methodologyVersion_not_in: [String!]
  methodologyVersion_contains: String
  methodologyVersion_contains_nocase: String
  methodologyVersion_not_contains: String
  methodologyVersion_not_contains_nocase: String
  methodologyVersion_starts_with: String
  methodologyVersion_starts_with_nocase: String
  methodologyVersion_not_starts_with: String
  methodologyVersion_not_starts_with_nocase: String
  methodologyVersion_ends_with: String
  methodologyVersion_ends_with_nocase: String
  methodologyVersion_not_ends_with: String
  methodologyVersion_not_ends_with_nocase: String
  network: Network
  network_not: Network
  network_in: [Network!]
  network_not_in: [Network!]
  type: ProtocolType
  type_not: ProtocolType
  type_in: [ProtocolType!]
  type_not_in: [ProtocolType!]
  protocolPriceOracle: String
  protocolPriceOracle_not: String
  protocolPriceOracle_gt: String
  protocolPriceOracle_lt: String
  protocolPriceOracle_gte: String
  protocolPriceOracle_lte: String
  protocolPriceOracle_in: [String!]
  protocolPriceOracle_not_in: [String!]
  protocolPriceOracle_contains: String
  protocolPriceOracle_contains_nocase: String
  protocolPriceOracle_not_contains: String
  protocolPriceOracle_not_contains_nocase: String
  protocolPriceOracle_starts_with: String
  protocolPriceOracle_starts_with_nocase: String
  protocolPriceOracle_not_starts_with: String
  protocolPriceOracle_not_starts_with_nocase: String
  protocolPriceOracle_ends_with: String
  protocolPriceOracle_ends_with_nocase: String
  protocolPriceOracle_not_ends_with: String
  protocolPriceOracle_not_ends_with_nocase: String
  totalUniqueUsers: Int
  totalUniqueUsers_not: Int
  totalUniqueUsers_gt: Int
  totalUniqueUsers_lt: Int
  totalUniqueUsers_gte: Int
  totalUniqueUsers_lte: Int
  totalUniqueUsers_in: [Int!]
  totalUniqueUsers_not_in: [Int!]
  totalRevenueUSD: BigDecimal
  totalRevenueUSD_not: BigDecimal
  totalRevenueUSD_gt: BigDecimal
  totalRevenueUSD_lt: BigDecimal
  totalRevenueUSD_gte: BigDecimal
  totalRevenueUSD_lte: BigDecimal
  totalRevenueUSD_in: [BigDecimal!]
  totalRevenueUSD_not_in: [BigDecimal!]
  totalValueLockedUSD: BigDecimal
  totalValueLockedUSD_not: BigDecimal
  totalValueLockedUSD_gt: BigDecimal
  totalValueLockedUSD_lt: BigDecimal
  totalValueLockedUSD_gte: BigDecimal
  totalValueLockedUSD_lte: BigDecimal
  totalValueLockedUSD_in: [BigDecimal!]
  totalValueLockedUSD_not_in: [BigDecimal!]
  protocolSideRevenueUSD: BigDecimal
  protocolSideRevenueUSD_not: BigDecimal
  protocolSideRevenueUSD_gt: BigDecimal
  protocolSideRevenueUSD_lt: BigDecimal
  protocolSideRevenueUSD_gte: BigDecimal
  protocolSideRevenueUSD_lte: BigDecimal
  protocolSideRevenueUSD_in: [BigDecimal!]
  protocolSideRevenueUSD_not_in: [BigDecimal!]
  supplySideRevenueUSD: BigDecimal
  supplySideRevenueUSD_not: BigDecimal
  supplySideRevenueUSD_gt: BigDecimal
  supplySideRevenueUSD_lt: BigDecimal
  supplySideRevenueUSD_gte: BigDecimal
  supplySideRevenueUSD_lte: BigDecimal
  supplySideRevenueUSD_in: [BigDecimal!]
  supplySideRevenueUSD_not_in: [BigDecimal!]
  totalVolumeUSD: BigDecimal
  totalVolumeUSD_not: BigDecimal
  totalVolumeUSD_gt: BigDecimal
  totalVolumeUSD_lt: BigDecimal
  totalVolumeUSD_gte: BigDecimal
  totalVolumeUSD_lte: BigDecimal
  totalVolumeUSD_in: [BigDecimal!]
  totalVolumeUSD_not_in: [BigDecimal!]
  totalDepositUSD: BigDecimal
  totalDepositUSD_not: BigDecimal
  totalDepositUSD_gt: BigDecimal
  totalDepositUSD_lt: BigDecimal
  totalDepositUSD_gte: BigDecimal
  totalDepositUSD_lte: BigDecimal
  totalDepositUSD_in: [BigDecimal!]
  totalDepositUSD_not_in: [BigDecimal!]
  totalBorrowUSD: BigDecimal
  totalBorrowUSD_not: BigDecimal
  totalBorrowUSD_gt: BigDecimal
  totalBorrowUSD_lt: BigDecimal
  totalBorrowUSD_gte: BigDecimal
  totalBorrowUSD_lte: BigDecimal
  totalBorrowUSD_in: [BigDecimal!]
  totalBorrowUSD_not_in: [BigDecimal!]
  lendingType: LendingType
  lendingType_not: LendingType
  lendingType_in: [LendingType!]
  lendingType_not_in: [LendingType!]
  riskType: RiskType
  riskType_not: RiskType
  riskType_in: [RiskType!]
  riskType_not_in: [RiskType!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  mintedTokens: [String!]
  mintedTokens_not: [String!]
  mintedTokens_contains: [String!]
  mintedTokens_contains_nocase: [String!]
  mintedTokens_not_contains: [String!]
  mintedTokens_not_contains_nocase: [String!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  protocolControlledValueUSD: BigDecimal
  protocolControlledValueUSD_not: BigDecimal
  protocolControlledValueUSD_gt: BigDecimal
  protocolControlledValueUSD_lt: BigDecimal
  protocolControlledValueUSD_gte: BigDecimal
  protocolControlledValueUSD_lte: BigDecimal
  protocolControlledValueUSD_in: [BigDecimal!]
  protocolControlledValueUSD_not_in: [BigDecimal!]
  cumulativeSupplySideRevenueUSD: BigDecimal
  cumulativeSupplySideRevenueUSD_not: BigDecimal
  cumulativeSupplySideRevenueUSD_gt: BigDecimal
  cumulativeSupplySideRevenueUSD_lt: BigDecimal
  cumulativeSupplySideRevenueUSD_gte: BigDecimal
  cumulativeSupplySideRevenueUSD_lte: BigDecimal
  cumulativeSupplySideRevenueUSD_in: [BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD: BigDecimal
  cumulativeProtocolSideRevenueUSD_not: BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [BigDecimal!]
  cumulativeTotalRevenueUSD: BigDecimal
  cumulativeTotalRevenueUSD_not: BigDecimal
  cumulativeTotalRevenueUSD_gt: BigDecimal
  cumulativeTotalRevenueUSD_lt: BigDecimal
  cumulativeTotalRevenueUSD_gte: BigDecimal
  cumulativeTotalRevenueUSD_lte: BigDecimal
  cumulativeTotalRevenueUSD_in: [BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [BigDecimal!]
  totalDepositBalanceUSD: BigDecimal
  totalDepositBalanceUSD_not: BigDecimal
  totalDepositBalanceUSD_gt: BigDecimal
  totalDepositBalanceUSD_lt: BigDecimal
  totalDepositBalanceUSD_gte: BigDecimal
  totalDepositBalanceUSD_lte: BigDecimal
  totalDepositBalanceUSD_in: [BigDecimal!]
  totalDepositBalanceUSD_not_in: [BigDecimal!]
  cumulativeDepositUSD: BigDecimal
  cumulativeDepositUSD_not: BigDecimal
  cumulativeDepositUSD_gt: BigDecimal
  cumulativeDepositUSD_lt: BigDecimal
  cumulativeDepositUSD_gte: BigDecimal
  cumulativeDepositUSD_lte: BigDecimal
  cumulativeDepositUSD_in: [BigDecimal!]
  cumulativeDepositUSD_not_in: [BigDecimal!]
  totalBorrowBalanceUSD: BigDecimal
  totalBorrowBalanceUSD_not: BigDecimal
  totalBorrowBalanceUSD_gt: BigDecimal
  totalBorrowBalanceUSD_lt: BigDecimal
  totalBorrowBalanceUSD_gte: BigDecimal
  totalBorrowBalanceUSD_lte: BigDecimal
  totalBorrowBalanceUSD_in: [BigDecimal!]
  totalBorrowBalanceUSD_not_in: [BigDecimal!]
  cumulativeBorrowUSD: BigDecimal
  cumulativeBorrowUSD_not: BigDecimal
  cumulativeBorrowUSD_gt: BigDecimal
  cumulativeBorrowUSD_lt: BigDecimal
  cumulativeBorrowUSD_gte: BigDecimal
  cumulativeBorrowUSD_lte: BigDecimal
  cumulativeBorrowUSD_in: [BigDecimal!]
  cumulativeBorrowUSD_not_in: [BigDecimal!]
  cumulativeLiquidateUSD: BigDecimal
  cumulativeLiquidateUSD_not: BigDecimal
  cumulativeLiquidateUSD_gt: BigDecimal
  cumulativeLiquidateUSD_lt: BigDecimal
  cumulativeLiquidateUSD_gte: BigDecimal
  cumulativeLiquidateUSD_lte: BigDecimal
  cumulativeLiquidateUSD_in: [BigDecimal!]
  cumulativeLiquidateUSD_not_in: [BigDecimal!]
  mintedTokenSupplies: [BigInt!]
  mintedTokenSupplies_not: [BigInt!]
  mintedTokenSupplies_contains: [BigInt!]
  mintedTokenSupplies_contains_nocase: [BigInt!]
  mintedTokenSupplies_not_contains: [BigInt!]
  mintedTokenSupplies_not_contains_nocase: [BigInt!]
  _priceOracle: Bytes
  _priceOracle_not: Bytes
  _priceOracle_gt: String
  _priceOracle_lt: String
  _priceOracle_gte: String
  _priceOracle_lte: String
  _priceOracle_in: [Bytes!]
  _priceOracle_not_in: [Bytes!]
  _priceOracle_contains: Bytes
  _priceOracle_contains_nocase: String
  _priceOracle_not_contains: Bytes
  _priceOracle_not_contains_nocase: String
  _priceOracle_starts_with: String
  _priceOracle_starts_with_nocase: String
  _priceOracle_not_starts_with: String
  _priceOracle_not_starts_with_nocase: String
  _priceOracle_ends_with: String
  _priceOracle_ends_with_nocase: String
  _priceOracle_not_ends_with: String
  _priceOracle_not_ends_with_nocase: String
  _marketIDs: [ID!]
  _marketIDs_not: [ID!]
  _marketIDs_contains: [ID!]
  _marketIDs_contains_nocase: [ID!]
  _marketIDs_not_contains: [ID!]
  _marketIDs_not_contains_nocase: [ID!]
  _liquidationIncentive: BigDecimal
  _liquidationIncentive_not: BigDecimal
  _liquidationIncentive_gt: BigDecimal
  _liquidationIncentive_lt: BigDecimal
  _liquidationIncentive_gte: BigDecimal
  _liquidationIncentive_lte: BigDecimal
  _liquidationIncentive_in: [BigDecimal!]
  _liquidationIncentive_not_in: [BigDecimal!]
  _marketIds: [String!]
  _marketIds_not: [String!]
  _marketIds_contains: [String!]
  _marketIds_contains_nocase: [String!]
  _marketIds_not_contains: [String!]
  _marketIds_not_contains_nocase: [String!]
  _liquidationPenalty: BigDecimal
  _liquidationPenalty_not: BigDecimal
  _liquidationPenalty_gt: BigDecimal
  _liquidationPenalty_lt: BigDecimal
  _liquidationPenalty_gte: BigDecimal
  _liquidationPenalty_lte: BigDecimal
  _liquidationPenalty_in: [BigDecimal!]
  _liquidationPenalty_not_in: [BigDecimal!]
}

enum LendingProtocol_orderBy {
  id
  name
  slug
  schemaVersion
  subgraphVersion
  methodologyVersion
  network
  type
  protocolPriceOracle
  totalUniqueUsers
  totalRevenueUSD
  totalValueLockedUSD
  protocolSideRevenueUSD
  supplySideRevenueUSD
  totalVolumeUSD
  totalDepositUSD
  totalBorrowUSD
  usageMetrics
  financialMetrics
  markets
  lendingType
  riskType
  mintedTokens
  cumulativeUniqueUsers
  protocolControlledValueUSD
  cumulativeSupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  totalDepositBalanceUSD
  cumulativeDepositUSD
  totalBorrowBalanceUSD
  cumulativeBorrowUSD
  cumulativeLiquidateUSD
  mintedTokenSupplies
  dailyUsageMetrics
  hourlyUsageMetrics
  _priceOracle
  _marketIDs
  _liquidationIncentive
  _marketIds
  _liquidationPenalty
}

enum LendingType {
  """ Collateralized Debt Position (CDP) protocols have singular isolated positions created by users. We aggregate them to give a single view of a market 
  """
  CDP
  """ Pooled protocols pool all users assets into a single market """
  POOLED
}

type Liquidate implements Event {
  """ { Transaction hash }-{ Log index } """
  id: ID!
  """ Transaction hash of the transaction that emitted this event """
  hash: String!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ The protocol this transaction belongs to """
  protocol: LendingProtocol!
  """ Market that tokens are repaid to """
  to: String!
  """ Address that carried out the liquidation """
  from: String!
  """ The number of days since Unix epoch time, used to signify which financial/metric dailySnapshots this transaction is recorded in 
  """
  snapshotId: String!
  """ Block number of this event """
  blockNumber: BigInt!
  """ Timestamp of this event """
  timestamp: BigInt!
  """ The market of which the debt is repaid to """
  market: Market!
  """ Collateral liquidated (e.g. cToken) """
  asset: Token!
  """ Amount of collateral liquidated in native units """
  amount: BigInt!
  """ Amount of collateral liquidated in USD """
  amountUSD: BigDecimal
  """ Amount of profit from liquidation in USD """
  profitUSD: BigDecimal
}

input Liquidate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hash: String
  hash_not: String
  hash_gt: String
  hash_lt: String
  hash_gte: String
  hash_lte: String
  hash_in: [String!]
  hash_not_in: [String!]
  hash_contains: String
  hash_contains_nocase: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  snapshotId: String
  snapshotId_not: String
  snapshotId_gt: String
  snapshotId_lt: String
  snapshotId_gte: String
  snapshotId_lte: String
  snapshotId_in: [String!]
  snapshotId_not_in: [String!]
  snapshotId_contains: String
  snapshotId_contains_nocase: String
  snapshotId_not_contains: String
  snapshotId_not_contains_nocase: String
  snapshotId_starts_with: String
  snapshotId_starts_with_nocase: String
  snapshotId_not_starts_with: String
  snapshotId_not_starts_with_nocase: String
  snapshotId_ends_with: String
  snapshotId_ends_with_nocase: String
  snapshotId_not_ends_with: String
  snapshotId_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amountUSD: BigDecimal
  amountUSD_not: BigDecimal
  amountUSD_gt: BigDecimal
  amountUSD_lt: BigDecimal
  amountUSD_gte: BigDecimal
  amountUSD_lte: BigDecimal
  amountUSD_in: [BigDecimal!]
  amountUSD_not_in: [BigDecimal!]
  profitUSD: BigDecimal
  profitUSD_not: BigDecimal
  profitUSD_gt: BigDecimal
  profitUSD_lt: BigDecimal
  profitUSD_gte: BigDecimal
  profitUSD_lte: BigDecimal
  profitUSD_in: [BigDecimal!]
  profitUSD_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Liquidate_orderBy {
  id
  hash
  logIndex
  protocol
  to
  from
  snapshotId
  blockNumber
  timestamp
  market
  asset
  amount
  amountUSD
  profitUSD
}

type Market {
  """ Smart contract address of the market """
  id: ID!
  """ The protocol this pool belongs to """
  protocol: LendingProtocol!
  """ Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool 
  """
  inputTokens(skip: Int = 0, first: Int = 100, orderBy: Token_orderBy, orderDirection: OrderDirection, where: Token_filter): [Token!]!
  """ Token that is minted to track ownership of position in protocol (e.g. aToken, cToken). Leave as null if doesn't exist 
  """
  outputToken: Token
  """ Aditional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon 
  """
  rewardTokens(skip: Int = 0, first: Int = 100, orderBy: RewardToken_orderBy, orderDirection: OrderDirection, where: RewardToken_filter): [RewardToken!]
  """ The variable debt token address correlated to the reserve asset """
  vToken: String!
  """ The stable debt token address correlated to the reserve asset """
  sToken: String!
  """ The reserve factor as a percentage """
  reserveFactor: BigInt!
  """ The total revenue to be collected on the market denominated in USD """
  totalRevenueUSD: BigDecimal!
  """ Current TVL (Total Value Locked) of this market """
  totalValueLockedUSD: BigDecimal!
  """ Total borrow volume in USD (i.e. total loan origination ) """
  totalVolumeUSD: BigDecimal!
  """ Total amount of tokens locked up in stable rate borrows """
  totalStableValueLocked: BigInt!
  """ Total amount of tokens locked up in variable rate borrows """
  totalVariableValueLocked: BigInt!
  """ Current balance of all deposited assets (not historical cumulative), in USD 
  """
  totalDepositUSD: BigDecimal!
  """ Current balance of all borrowed assets (not historical cumulative), in USD. In the case of CDPs, this will be all minted assets 
  """
  totalBorrowUSD: BigDecimal!
  """ Amount of input tokens in the market. The ordering should be the same as the market's `inputTokens` field. 
  """
  inputTokenBalances: [BigInt!]!
  """ Price per share of input token in USD """
  inputTokenPricesUSD: [BigDecimal!]!
  """ Total supply of output token """
  outputTokenSupply: BigInt!
  """ Price per share of output token in USD """
  outputTokenPriceUSD: BigDecimal!
  """ Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsAmount: [BigInt!]
  """ Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsUSD: [BigDecimal!]
  """ Creation timestamp """
  createdTimestamp: BigInt!
  """ Creation block number """
  createdBlockNumber: BigInt!
  """ Pool snapshots """
  snapshots(skip: Int = 0, first: Int = 100, orderBy: MarketDailySnapshot_orderBy, orderDirection: OrderDirection, where: MarketDailySnapshot_filter): [MarketDailySnapshot!]!
  """ Name of market """
  name: String
  """ Is this market active or is it frozen """
  isActive: Boolean!
  """ Can you use the output token as collateral """
  canUseAsCollateral: Boolean!
  """ Can you borrow from this market """
  canBorrowFrom: Boolean!
  """ The portion of the revenue from this market allocated to the protocol 
  """
  protocolSideRevenueUSD: BigDecimal!
  """ The portion of the revenue from this market allocated to the suppliers (depositors) 
  """
  supplySideRevenueUSD: BigDecimal!
  """ Maximum loan-to-value ratio as a percentage value (e.g. 75% for DAI in Aave) 
  """
  maximumLTV: BigDecimal!
  """ Liquidation threshold as a percentage value (e.g. 80% for DAI in Aave). When it is reached, the position is defined as undercollateralised and could be liquidated 
  """
  liquidationThreshold: BigDecimal!
  """ Liquidation penalty (or the liquidation bonus for liquidators) as a percentage value. It is the penalty/bonus price on the collateral when liquidators purchase it as part of the liquidation of a loan that has passed the liquidation threshold 
  """
  liquidationPenalty: BigDecimal!
  """ Deposit interest rate in APY percentage """
  depositRate: BigDecimal!
  """ Stable borrow interest rate in APY percentage. Leave as null if no stable borrow rate 
  """
  stableBorrowRate: BigDecimal!
  """ Variable borrow interest rate in APY percentage """
  variableBorrowRate: BigDecimal!
  """ All deposits made to this market """
  deposits(skip: Int = 0, first: Int = 100, orderBy: Deposit_orderBy, orderDirection: OrderDirection, where: Deposit_filter): [Deposit!]!
  """ All withdrawals made from this market """
  withdraws(skip: Int = 0, first: Int = 100, orderBy: Withdraw_orderBy, orderDirection: OrderDirection, where: Withdraw_filter): [Withdraw!]!
  """ All borrows from this market """
  borrows(skip: Int = 0, first: Int = 100, orderBy: Borrow_orderBy, orderDirection: OrderDirection, where: Borrow_filter): [Borrow!]!
  """ All repayments to this market """
  repays(skip: Int = 0, first: Int = 100, orderBy: Repay_orderBy, orderDirection: OrderDirection, where: Repay_filter): [Repay!]!
  """ All liquidations made to this market """
  liquidates(skip: Int = 0, first: Int = 100, orderBy: Liquidate_orderBy, orderDirection: OrderDirection, where: Liquidate_filter): [Liquidate!]!
  """ Token that need to be deposited to take a position in protocol """
  inputToken: Token!
  """ All interest rates / fees allowed in the market. Interest rate should be in APY percentage 
  """
  rates(skip: Int = 0, first: Int = 100, orderBy: InterestRate_orderBy, orderDirection: OrderDirection, where: InterestRate_filter): [InterestRate!]!
  """ Current balance of all deposited assets (not historical cumulative), in USD 
  """
  totalDepositBalanceUSD: BigDecimal!
  """ Sum of all historical deposits in USD (only considers deposits and not withdrawals) 
  """
  cumulativeDepositUSD: BigDecimal!
  """ Current balance of all borrowed/minted assets (not historical cumulative), in USD 
  """
  totalBorrowBalanceUSD: BigDecimal!
  """ Sum of all historical borrows/mints in USD (i.e. total loan origination) 
  """
  cumulativeBorrowUSD: BigDecimal!
  """ Sum of all historical liquidations in USD """
  cumulativeLiquidateUSD: BigDecimal!
  """ Amount of input tokens in the market """
  inputTokenBalance: BigInt!
  """ Price per share of input token in USD """
  inputTokenPriceUSD: BigDecimal!
  """ Amount of input token per full share of output token. Only applies when the output token exists 
  """
  exchangeRate: BigDecimal!
  """ Market daily snapshots """
  dailySnapshots(skip: Int = 0, first: Int = 100, orderBy: MarketDailySnapshot_orderBy, orderDirection: OrderDirection, where: MarketDailySnapshot_filter): [MarketDailySnapshot!]!
  """ Market hourly snapshots """
  hourlySnapshots(skip: Int = 0, first: Int = 100, orderBy: MarketHourlySnapshot_orderBy, orderDirection: OrderDirection, where: MarketHourlySnapshot_filter): [MarketHourlySnapshot!]!
  _cumulativeSupplySideRevenueUSD: BigDecimal!
  _cumulativeProtocolSideRevenueUSD: BigDecimal!
  _cumulativeTotalRevenueUSD: BigDecimal!
  """ Market reserve factor """
  _reserveFactor: BigDecimal!
  """ Current amount of borrows in native underlying unit """
  _currentBorrowBalance: BigInt!
  """ Most recent block height seen for rate updates """
  _lastUpdateBlock: BigInt!
}

type MarketDailySnapshot {
  """ { Smart contract address of the market }-{ # of days since Unix epoch time } 
  """
  id: ID!
  """ The protocol this snapshot belongs to """
  protocol: LendingProtocol!
  """ The pool this snapshot belongs to """
  market: Market!
  """ Current TVL (Total Value Locked) of this market """
  totalValueLockedUSD: BigDecimal!
  """ Total borrow volume in USD (i.e. total loan origination ) """
  totalVolumeUSD: BigDecimal!
  """ Current balance of all deposited assets (not historical cumulative), in USD 
  """
  totalDepositUSD: BigDecimal!
  """ Current balance of all borrowed assets (not historical cumulative), in USD. In the case of CDPs, this will be all minted assets 
  """
  totalBorrowUSD: BigDecimal!
  """ Amount of input tokens in the market. The ordering should be the same as the market's `inputTokens` field. 
  """
  inputTokenBalances: [BigInt!]!
  """ Price per share of input token in USD """
  inputTokenPricesUSD: [BigDecimal!]!
  """ Total supply of output token """
  outputTokenSupply: BigInt!
  """ Price per share of output token in USD """
  outputTokenPriceUSD: BigDecimal!
  """ Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsAmount: [BigInt!]
  """ Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsUSD: [BigDecimal!]
  """ Block number of this snapshot """
  blockNumber: BigInt!
  """ Timestamp of this snapshot """
  timestamp: BigInt!
  """ Deposit interest rate in APY percentage """
  depositRate: BigDecimal!
  """ Stable borrow interest rate in APY percentage. Leave as null if no stable borrow rate 
  """
  stableBorrowRate: BigDecimal!
  """ Variable borrow interest rate in APY percentage """
  variableBorrowRate: BigDecimal!
  """ All interest rates / fees allowed in the market. Interest rate should be in APY percentage 
  """
  rates(skip: Int = 0, first: Int = 100, orderBy: InterestRate_orderBy, orderDirection: OrderDirection, where: InterestRate_filter): [InterestRate!]!
  """ Current balance of all deposited assets (not historical cumulative), in USD. Same as pool TVL. 
  """
  totalDepositBalanceUSD: BigDecimal!
  """ Sum of all deposits made on a given day, in USD """
  dailyDepositUSD: BigDecimal!
  """ Sum of all historical deposits in USD (only considers deposits and not withdrawals) 
  """
  cumulativeDepositUSD: BigDecimal!
  """ Current balance of all borrowed/minted assets (not historical cumulative), in USD. 
  """
  totalBorrowBalanceUSD: BigDecimal!
  """ Sum of all borrows/mints made on a given day, in USD """
  dailyBorrowUSD: BigDecimal!
  """ Sum of all historical borrows/mints in USD (i.e. total loan origination) 
  """
  cumulativeBorrowUSD: BigDecimal!
  """ Total assets liquidated on a given day, in USD. """
  dailyLiquidateUSD: BigDecimal!
  """ Sum of all historical liquidations in USD """
  cumulativeLiquidateUSD: BigDecimal!
  """ Amount of input token in the market. """
  inputTokenBalance: BigInt!
  """ Price per share of input token in USD """
  inputTokenPriceUSD: BigDecimal!
  """ Amount of input token per full share of output token. Only applies when the output token exists 
  """
  exchangeRate: BigDecimal
  _dailyTotalRevenueUSD: BigDecimal!
  _dailySupplySideRevenueUSD: BigDecimal!
  _dailyProtocolSideRevenueUSD: BigDecimal!
}

input MarketDailySnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  totalValueLockedUSD: BigDecimal
  totalValueLockedUSD_not: BigDecimal
  totalValueLockedUSD_gt: BigDecimal
  totalValueLockedUSD_lt: BigDecimal
  totalValueLockedUSD_gte: BigDecimal
  totalValueLockedUSD_lte: BigDecimal
  totalValueLockedUSD_in: [BigDecimal!]
  totalValueLockedUSD_not_in: [BigDecimal!]
  totalVolumeUSD: BigDecimal
  totalVolumeUSD_not: BigDecimal
  totalVolumeUSD_gt: BigDecimal
  totalVolumeUSD_lt: BigDecimal
  totalVolumeUSD_gte: BigDecimal
  totalVolumeUSD_lte: BigDecimal
  totalVolumeUSD_in: [BigDecimal!]
  totalVolumeUSD_not_in: [BigDecimal!]
  totalDepositUSD: BigDecimal
  totalDepositUSD_not: BigDecimal
  totalDepositUSD_gt: BigDecimal
  totalDepositUSD_lt: BigDecimal
  totalDepositUSD_gte: BigDecimal
  totalDepositUSD_lte: BigDecimal
  totalDepositUSD_in: [BigDecimal!]
  totalDepositUSD_not_in: [BigDecimal!]
  totalBorrowUSD: BigDecimal
  totalBorrowUSD_not: BigDecimal
  totalBorrowUSD_gt: BigDecimal
  totalBorrowUSD_lt: BigDecimal
  totalBorrowUSD_gte: BigDecimal
  totalBorrowUSD_lte: BigDecimal
  totalBorrowUSD_in: [BigDecimal!]
  totalBorrowUSD_not_in: [BigDecimal!]
  inputTokenBalances: [BigInt!]
  inputTokenBalances_not: [BigInt!]
  inputTokenBalances_contains: [BigInt!]
  inputTokenBalances_contains_nocase: [BigInt!]
  inputTokenBalances_not_contains: [BigInt!]
  inputTokenBalances_not_contains_nocase: [BigInt!]
  inputTokenPricesUSD: [BigDecimal!]
  inputTokenPricesUSD_not: [BigDecimal!]
  inputTokenPricesUSD_contains: [BigDecimal!]
  inputTokenPricesUSD_contains_nocase: [BigDecimal!]
  inputTokenPricesUSD_not_contains: [BigDecimal!]
  inputTokenPricesUSD_not_contains_nocase: [BigDecimal!]
  outputTokenSupply: BigInt
  outputTokenSupply_not: BigInt
  outputTokenSupply_gt: BigInt
  outputTokenSupply_lt: BigInt
  outputTokenSupply_gte: BigInt
  outputTokenSupply_lte: BigInt
  outputTokenSupply_in: [BigInt!]
  outputTokenSupply_not_in: [BigInt!]
  outputTokenPriceUSD: BigDecimal
  outputTokenPriceUSD_not: BigDecimal
  outputTokenPriceUSD_gt: BigDecimal
  outputTokenPriceUSD_lt: BigDecimal
  outputTokenPriceUSD_gte: BigDecimal
  outputTokenPriceUSD_lte: BigDecimal
  outputTokenPriceUSD_in: [BigDecimal!]
  outputTokenPriceUSD_not_in: [BigDecimal!]
  rewardTokenEmissionsAmount: [BigInt!]
  rewardTokenEmissionsAmount_not: [BigInt!]
  rewardTokenEmissionsAmount_contains: [BigInt!]
  rewardTokenEmissionsAmount_contains_nocase: [BigInt!]
  rewardTokenEmissionsAmount_not_contains: [BigInt!]
  rewardTokenEmissionsAmount_not_contains_nocase: [BigInt!]
  rewardTokenEmissionsUSD: [BigDecimal!]
  rewardTokenEmissionsUSD_not: [BigDecimal!]
  rewardTokenEmissionsUSD_contains: [BigDecimal!]
  rewardTokenEmissionsUSD_contains_nocase: [BigDecimal!]
  rewardTokenEmissionsUSD_not_contains: [BigDecimal!]
  rewardTokenEmissionsUSD_not_contains_nocase: [BigDecimal!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  depositRate: BigDecimal
  depositRate_not: BigDecimal
  depositRate_gt: BigDecimal
  depositRate_lt: BigDecimal
  depositRate_gte: BigDecimal
  depositRate_lte: BigDecimal
  depositRate_in: [BigDecimal!]
  depositRate_not_in: [BigDecimal!]
  stableBorrowRate: BigDecimal
  stableBorrowRate_not: BigDecimal
  stableBorrowRate_gt: BigDecimal
  stableBorrowRate_lt: BigDecimal
  stableBorrowRate_gte: BigDecimal
  stableBorrowRate_lte: BigDecimal
  stableBorrowRate_in: [BigDecimal!]
  stableBorrowRate_not_in: [BigDecimal!]
  variableBorrowRate: BigDecimal
  variableBorrowRate_not: BigDecimal
  variableBorrowRate_gt: BigDecimal
  variableBorrowRate_lt: BigDecimal
  variableBorrowRate_gte: BigDecimal
  variableBorrowRate_lte: BigDecimal
  variableBorrowRate_in: [BigDecimal!]
  variableBorrowRate_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  rates: [String!]
  rates_not: [String!]
  rates_contains: [String!]
  rates_contains_nocase: [String!]
  rates_not_contains: [String!]
  rates_not_contains_nocase: [String!]
  totalDepositBalanceUSD: BigDecimal
  totalDepositBalanceUSD_not: BigDecimal
  totalDepositBalanceUSD_gt: BigDecimal
  totalDepositBalanceUSD_lt: BigDecimal
  totalDepositBalanceUSD_gte: BigDecimal
  totalDepositBalanceUSD_lte: BigDecimal
  totalDepositBalanceUSD_in: [BigDecimal!]
  totalDepositBalanceUSD_not_in: [BigDecimal!]
  dailyDepositUSD: BigDecimal
  dailyDepositUSD_not: BigDecimal
  dailyDepositUSD_gt: BigDecimal
  dailyDepositUSD_lt: BigDecimal
  dailyDepositUSD_gte: BigDecimal
  dailyDepositUSD_lte: BigDecimal
  dailyDepositUSD_in: [BigDecimal!]
  dailyDepositUSD_not_in: [BigDecimal!]
  cumulativeDepositUSD: BigDecimal
  cumulativeDepositUSD_not: BigDecimal
  cumulativeDepositUSD_gt: BigDecimal
  cumulativeDepositUSD_lt: BigDecimal
  cumulativeDepositUSD_gte: BigDecimal
  cumulativeDepositUSD_lte: BigDecimal
  cumulativeDepositUSD_in: [BigDecimal!]
  cumulativeDepositUSD_not_in: [BigDecimal!]
  totalBorrowBalanceUSD: BigDecimal
  totalBorrowBalanceUSD_not: BigDecimal
  totalBorrowBalanceUSD_gt: BigDecimal
  totalBorrowBalanceUSD_lt: BigDecimal
  totalBorrowBalanceUSD_gte: BigDecimal
  totalBorrowBalanceUSD_lte: BigDecimal
  totalBorrowBalanceUSD_in: [BigDecimal!]
  totalBorrowBalanceUSD_not_in: [BigDecimal!]
  dailyBorrowUSD: BigDecimal
  dailyBorrowUSD_not: BigDecimal
  dailyBorrowUSD_gt: BigDecimal
  dailyBorrowUSD_lt: BigDecimal
  dailyBorrowUSD_gte: BigDecimal
  dailyBorrowUSD_lte: BigDecimal
  dailyBorrowUSD_in: [BigDecimal!]
  dailyBorrowUSD_not_in: [BigDecimal!]
  cumulativeBorrowUSD: BigDecimal
  cumulativeBorrowUSD_not: BigDecimal
  cumulativeBorrowUSD_gt: BigDecimal
  cumulativeBorrowUSD_lt: BigDecimal
  cumulativeBorrowUSD_gte: BigDecimal
  cumulativeBorrowUSD_lte: BigDecimal
  cumulativeBorrowUSD_in: [BigDecimal!]
  cumulativeBorrowUSD_not_in: [BigDecimal!]
  dailyLiquidateUSD: BigDecimal
  dailyLiquidateUSD_not: BigDecimal
  dailyLiquidateUSD_gt: BigDecimal
  dailyLiquidateUSD_lt: BigDecimal
  dailyLiquidateUSD_gte: BigDecimal
  dailyLiquidateUSD_lte: BigDecimal
  dailyLiquidateUSD_in: [BigDecimal!]
  dailyLiquidateUSD_not_in: [BigDecimal!]
  cumulativeLiquidateUSD: BigDecimal
  cumulativeLiquidateUSD_not: BigDecimal
  cumulativeLiquidateUSD_gt: BigDecimal
  cumulativeLiquidateUSD_lt: BigDecimal
  cumulativeLiquidateUSD_gte: BigDecimal
  cumulativeLiquidateUSD_lte: BigDecimal
  cumulativeLiquidateUSD_in: [BigDecimal!]
  cumulativeLiquidateUSD_not_in: [BigDecimal!]
  inputTokenBalance: BigInt
  inputTokenBalance_not: BigInt
  inputTokenBalance_gt: BigInt
  inputTokenBalance_lt: BigInt
  inputTokenBalance_gte: BigInt
  inputTokenBalance_lte: BigInt
  inputTokenBalance_in: [BigInt!]
  inputTokenBalance_not_in: [BigInt!]
  inputTokenPriceUSD: BigDecimal
  inputTokenPriceUSD_not: BigDecimal
  inputTokenPriceUSD_gt: BigDecimal
  inputTokenPriceUSD_lt: BigDecimal
  inputTokenPriceUSD_gte: BigDecimal
  inputTokenPriceUSD_lte: BigDecimal
  inputTokenPriceUSD_in: [BigDecimal!]
  inputTokenPriceUSD_not_in: [BigDecimal!]
  exchangeRate: BigDecimal
  exchangeRate_not: BigDecimal
  exchangeRate_gt: BigDecimal
  exchangeRate_lt: BigDecimal
  exchangeRate_gte: BigDecimal
  exchangeRate_lte: BigDecimal
  exchangeRate_in: [BigDecimal!]
  exchangeRate_not_in: [BigDecimal!]
  _dailyTotalRevenueUSD: BigDecimal
  _dailyTotalRevenueUSD_not: BigDecimal
  _dailyTotalRevenueUSD_gt: BigDecimal
  _dailyTotalRevenueUSD_lt: BigDecimal
  _dailyTotalRevenueUSD_gte: BigDecimal
  _dailyTotalRevenueUSD_lte: BigDecimal
  _dailyTotalRevenueUSD_in: [BigDecimal!]
  _dailyTotalRevenueUSD_not_in: [BigDecimal!]
  _dailySupplySideRevenueUSD: BigDecimal
  _dailySupplySideRevenueUSD_not: BigDecimal
  _dailySupplySideRevenueUSD_gt: BigDecimal
  _dailySupplySideRevenueUSD_lt: BigDecimal
  _dailySupplySideRevenueUSD_gte: BigDecimal
  _dailySupplySideRevenueUSD_lte: BigDecimal
  _dailySupplySideRevenueUSD_in: [BigDecimal!]
  _dailySupplySideRevenueUSD_not_in: [BigDecimal!]
  _dailyProtocolSideRevenueUSD: BigDecimal
  _dailyProtocolSideRevenueUSD_not: BigDecimal
  _dailyProtocolSideRevenueUSD_gt: BigDecimal
  _dailyProtocolSideRevenueUSD_lt: BigDecimal
  _dailyProtocolSideRevenueUSD_gte: BigDecimal
  _dailyProtocolSideRevenueUSD_lte: BigDecimal
  _dailyProtocolSideRevenueUSD_in: [BigDecimal!]
  _dailyProtocolSideRevenueUSD_not_in: [BigDecimal!]
}

enum MarketDailySnapshot_orderBy {
  id
  protocol
  market
  totalValueLockedUSD
  totalVolumeUSD
  totalDepositUSD
  totalBorrowUSD
  inputTokenBalances
  inputTokenPricesUSD
  outputTokenSupply
  outputTokenPriceUSD
  rewardTokenEmissionsAmount
  rewardTokenEmissionsUSD
  blockNumber
  timestamp
  depositRate
  stableBorrowRate
  variableBorrowRate
  rates
  totalDepositBalanceUSD
  dailyDepositUSD
  cumulativeDepositUSD
  totalBorrowBalanceUSD
  dailyBorrowUSD
  cumulativeBorrowUSD
  dailyLiquidateUSD
  cumulativeLiquidateUSD
  inputTokenBalance
  inputTokenPriceUSD
  exchangeRate
  _dailyTotalRevenueUSD
  _dailySupplySideRevenueUSD
  _dailyProtocolSideRevenueUSD
}

input Market_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  inputTokens: [String!]
  inputTokens_not: [String!]
  inputTokens_contains: [String!]
  inputTokens_contains_nocase: [String!]
  inputTokens_not_contains: [String!]
  inputTokens_not_contains_nocase: [String!]
  outputToken: String
  outputToken_not: String
  outputToken_gt: String
  outputToken_lt: String
  outputToken_gte: String
  outputToken_lte: String
  outputToken_in: [String!]
  outputToken_not_in: [String!]
  outputToken_contains: String
  outputToken_contains_nocase: String
  outputToken_not_contains: String
  outputToken_not_contains_nocase: String
  outputToken_starts_with: String
  outputToken_starts_with_nocase: String
  outputToken_not_starts_with: String
  outputToken_not_starts_with_nocase: String
  outputToken_ends_with: String
  outputToken_ends_with_nocase: String
  outputToken_not_ends_with: String
  outputToken_not_ends_with_nocase: String
  rewardTokens: [String!]
  rewardTokens_not: [String!]
  rewardTokens_contains: [String!]
  rewardTokens_contains_nocase: [String!]
  rewardTokens_not_contains: [String!]
  rewardTokens_not_contains_nocase: [String!]
  vToken: String
  vToken_not: String
  vToken_gt: String
  vToken_lt: String
  vToken_gte: String
  vToken_lte: String
  vToken_in: [String!]
  vToken_not_in: [String!]
  vToken_contains: String
  vToken_contains_nocase: String
  vToken_not_contains: String
  vToken_not_contains_nocase: String
  vToken_starts_with: String
  vToken_starts_with_nocase: String
  vToken_not_starts_with: String
  vToken_not_starts_with_nocase: String
  vToken_ends_with: String
  vToken_ends_with_nocase: String
  vToken_not_ends_with: String
  vToken_not_ends_with_nocase: String
  sToken: String
  sToken_not: String
  sToken_gt: String
  sToken_lt: String
  sToken_gte: String
  sToken_lte: String
  sToken_in: [String!]
  sToken_not_in: [String!]
  sToken_contains: String
  sToken_contains_nocase: String
  sToken_not_contains: String
  sToken_not_contains_nocase: String
  sToken_starts_with: String
  sToken_starts_with_nocase: String
  sToken_not_starts_with: String
  sToken_not_starts_with_nocase: String
  sToken_ends_with: String
  sToken_ends_with_nocase: String
  sToken_not_ends_with: String
  sToken_not_ends_with_nocase: String
  reserveFactor: BigInt
  reserveFactor_not: BigInt
  reserveFactor_gt: BigInt
  reserveFactor_lt: BigInt
  reserveFactor_gte: BigInt
  reserveFactor_lte: BigInt
  reserveFactor_in: [BigInt!]
  reserveFactor_not_in: [BigInt!]
  totalRevenueUSD: BigDecimal
  totalRevenueUSD_not: BigDecimal
  totalRevenueUSD_gt: BigDecimal
  totalRevenueUSD_lt: BigDecimal
  totalRevenueUSD_gte: BigDecimal
  totalRevenueUSD_lte: BigDecimal
  totalRevenueUSD_in: [BigDecimal!]
  totalRevenueUSD_not_in: [BigDecimal!]
  totalValueLockedUSD: BigDecimal
  totalValueLockedUSD_not: BigDecimal
  totalValueLockedUSD_gt: BigDecimal
  totalValueLockedUSD_lt: BigDecimal
  totalValueLockedUSD_gte: BigDecimal
  totalValueLockedUSD_lte: BigDecimal
  totalValueLockedUSD_in: [BigDecimal!]
  totalValueLockedUSD_not_in: [BigDecimal!]
  totalVolumeUSD: BigDecimal
  totalVolumeUSD_not: BigDecimal
  totalVolumeUSD_gt: BigDecimal
  totalVolumeUSD_lt: BigDecimal
  totalVolumeUSD_gte: BigDecimal
  totalVolumeUSD_lte: BigDecimal
  totalVolumeUSD_in: [BigDecimal!]
  totalVolumeUSD_not_in: [BigDecimal!]
  totalStableValueLocked: BigInt
  totalStableValueLocked_not: BigInt
  totalStableValueLocked_gt: BigInt
  totalStableValueLocked_lt: BigInt
  totalStableValueLocked_gte: BigInt
  totalStableValueLocked_lte: BigInt
  totalStableValueLocked_in: [BigInt!]
  totalStableValueLocked_not_in: [BigInt!]
  totalVariableValueLocked: BigInt
  totalVariableValueLocked_not: BigInt
  totalVariableValueLocked_gt: BigInt
  totalVariableValueLocked_lt: BigInt
  totalVariableValueLocked_gte: BigInt
  totalVariableValueLocked_lte: BigInt
  totalVariableValueLocked_in: [BigInt!]
  totalVariableValueLocked_not_in: [BigInt!]
  totalDepositUSD: BigDecimal
  totalDepositUSD_not: BigDecimal
  totalDepositUSD_gt: BigDecimal
  totalDepositUSD_lt: BigDecimal
  totalDepositUSD_gte: BigDecimal
  totalDepositUSD_lte: BigDecimal
  totalDepositUSD_in: [BigDecimal!]
  totalDepositUSD_not_in: [BigDecimal!]
  totalBorrowUSD: BigDecimal
  totalBorrowUSD_not: BigDecimal
  totalBorrowUSD_gt: BigDecimal
  totalBorrowUSD_lt: BigDecimal
  totalBorrowUSD_gte: BigDecimal
  totalBorrowUSD_lte: BigDecimal
  totalBorrowUSD_in: [BigDecimal!]
  totalBorrowUSD_not_in: [BigDecimal!]
  inputTokenBalances: [BigInt!]
  inputTokenBalances_not: [BigInt!]
  inputTokenBalances_contains: [BigInt!]
  inputTokenBalances_contains_nocase: [BigInt!]
  inputTokenBalances_not_contains: [BigInt!]
  inputTokenBalances_not_contains_nocase: [BigInt!]
  inputTokenPricesUSD: [BigDecimal!]
  inputTokenPricesUSD_not: [BigDecimal!]
  inputTokenPricesUSD_contains: [BigDecimal!]
  inputTokenPricesUSD_contains_nocase: [BigDecimal!]
  inputTokenPricesUSD_not_contains: [BigDecimal!]
  inputTokenPricesUSD_not_contains_nocase: [BigDecimal!]
  outputTokenSupply: BigInt
  outputTokenSupply_not: BigInt
  outputTokenSupply_gt: BigInt
  outputTokenSupply_lt: BigInt
  outputTokenSupply_gte: BigInt
  outputTokenSupply_lte: BigInt
  outputTokenSupply_in: [BigInt!]
  outputTokenSupply_not_in: [BigInt!]
  outputTokenPriceUSD: BigDecimal
  outputTokenPriceUSD_not: BigDecimal
  outputTokenPriceUSD_gt: BigDecimal
  outputTokenPriceUSD_lt: BigDecimal
  outputTokenPriceUSD_gte: BigDecimal
  outputTokenPriceUSD_lte: BigDecimal
  outputTokenPriceUSD_in: [BigDecimal!]
  outputTokenPriceUSD_not_in: [BigDecimal!]
  rewardTokenEmissionsAmount: [BigInt!]
  rewardTokenEmissionsAmount_not: [BigInt!]
  rewardTokenEmissionsAmount_contains: [BigInt!]
  rewardTokenEmissionsAmount_contains_nocase: [BigInt!]
  rewardTokenEmissionsAmount_not_contains: [BigInt!]
  rewardTokenEmissionsAmount_not_contains_nocase: [BigInt!]
  rewardTokenEmissionsUSD: [BigDecimal!]
  rewardTokenEmissionsUSD_not: [BigDecimal!]
  rewardTokenEmissionsUSD_contains: [BigDecimal!]
  rewardTokenEmissionsUSD_contains_nocase: [BigDecimal!]
  rewardTokenEmissionsUSD_not_contains: [BigDecimal!]
  rewardTokenEmissionsUSD_not_contains_nocase: [BigDecimal!]
  createdTimestamp: BigInt
  createdTimestamp_not: BigInt
  createdTimestamp_gt: BigInt
  createdTimestamp_lt: BigInt
  createdTimestamp_gte: BigInt
  createdTimestamp_lte: BigInt
  createdTimestamp_in: [BigInt!]
  createdTimestamp_not_in: [BigInt!]
  createdBlockNumber: BigInt
  createdBlockNumber_not: BigInt
  createdBlockNumber_gt: BigInt
  createdBlockNumber_lt: BigInt
  createdBlockNumber_gte: BigInt
  createdBlockNumber_lte: BigInt
  createdBlockNumber_in: [BigInt!]
  createdBlockNumber_not_in: [BigInt!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  canUseAsCollateral: Boolean
  canUseAsCollateral_not: Boolean
  canUseAsCollateral_in: [Boolean!]
  canUseAsCollateral_not_in: [Boolean!]
  canBorrowFrom: Boolean
  canBorrowFrom_not: Boolean
  canBorrowFrom_in: [Boolean!]
  canBorrowFrom_not_in: [Boolean!]
  protocolSideRevenueUSD: BigDecimal
  protocolSideRevenueUSD_not: BigDecimal
  protocolSideRevenueUSD_gt: BigDecimal
  protocolSideRevenueUSD_lt: BigDecimal
  protocolSideRevenueUSD_gte: BigDecimal
  protocolSideRevenueUSD_lte: BigDecimal
  protocolSideRevenueUSD_in: [BigDecimal!]
  protocolSideRevenueUSD_not_in: [BigDecimal!]
  supplySideRevenueUSD: BigDecimal
  supplySideRevenueUSD_not: BigDecimal
  supplySideRevenueUSD_gt: BigDecimal
  supplySideRevenueUSD_lt: BigDecimal
  supplySideRevenueUSD_gte: BigDecimal
  supplySideRevenueUSD_lte: BigDecimal
  supplySideRevenueUSD_in: [BigDecimal!]
  supplySideRevenueUSD_not_in: [BigDecimal!]
  maximumLTV: BigDecimal
  maximumLTV_not: BigDecimal
  maximumLTV_gt: BigDecimal
  maximumLTV_lt: BigDecimal
  maximumLTV_gte: BigDecimal
  maximumLTV_lte: BigDecimal
  maximumLTV_in: [BigDecimal!]
  maximumLTV_not_in: [BigDecimal!]
  liquidationThreshold: BigDecimal
  liquidationThreshold_not: BigDecimal
  liquidationThreshold_gt: BigDecimal
  liquidationThreshold_lt: BigDecimal
  liquidationThreshold_gte: BigDecimal
  liquidationThreshold_lte: BigDecimal
  liquidationThreshold_in: [BigDecimal!]
  liquidationThreshold_not_in: [BigDecimal!]
  liquidationPenalty: BigDecimal
  liquidationPenalty_not: BigDecimal
  liquidationPenalty_gt: BigDecimal
  liquidationPenalty_lt: BigDecimal
  liquidationPenalty_gte: BigDecimal
  liquidationPenalty_lte: BigDecimal
  liquidationPenalty_in: [BigDecimal!]
  liquidationPenalty_not_in: [BigDecimal!]
  depositRate: BigDecimal
  depositRate_not: BigDecimal
  depositRate_gt: BigDecimal
  depositRate_lt: BigDecimal
  depositRate_gte: BigDecimal
  depositRate_lte: BigDecimal
  depositRate_in: [BigDecimal!]
  depositRate_not_in: [BigDecimal!]
  stableBorrowRate: BigDecimal
  stableBorrowRate_not: BigDecimal
  stableBorrowRate_gt: BigDecimal
  stableBorrowRate_lt: BigDecimal
  stableBorrowRate_gte: BigDecimal
  stableBorrowRate_lte: BigDecimal
  stableBorrowRate_in: [BigDecimal!]
  stableBorrowRate_not_in: [BigDecimal!]
  variableBorrowRate: BigDecimal
  variableBorrowRate_not: BigDecimal
  variableBorrowRate_gt: BigDecimal
  variableBorrowRate_lt: BigDecimal
  variableBorrowRate_gte: BigDecimal
  variableBorrowRate_lte: BigDecimal
  variableBorrowRate_in: [BigDecimal!]
  variableBorrowRate_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  inputToken: String
  inputToken_not: String
  inputToken_gt: String
  inputToken_lt: String
  inputToken_gte: String
  inputToken_lte: String
  inputToken_in: [String!]
  inputToken_not_in: [String!]
  inputToken_contains: String
  inputToken_contains_nocase: String
  inputToken_not_contains: String
  inputToken_not_contains_nocase: String
  inputToken_starts_with: String
  inputToken_starts_with_nocase: String
  inputToken_not_starts_with: String
  inputToken_not_starts_with_nocase: String
  inputToken_ends_with: String
  inputToken_ends_with_nocase: String
  inputToken_not_ends_with: String
  inputToken_not_ends_with_nocase: String
  rates: [String!]
  rates_not: [String!]
  rates_contains: [String!]
  rates_contains_nocase: [String!]
  rates_not_contains: [String!]
  rates_not_contains_nocase: [String!]
  totalDepositBalanceUSD: BigDecimal
  totalDepositBalanceUSD_not: BigDecimal
  totalDepositBalanceUSD_gt: BigDecimal
  totalDepositBalanceUSD_lt: BigDecimal
  totalDepositBalanceUSD_gte: BigDecimal
  totalDepositBalanceUSD_lte: BigDecimal
  totalDepositBalanceUSD_in: [BigDecimal!]
  totalDepositBalanceUSD_not_in: [BigDecimal!]
  cumulativeDepositUSD: BigDecimal
  cumulativeDepositUSD_not: BigDecimal
  cumulativeDepositUSD_gt: BigDecimal
  cumulativeDepositUSD_lt: BigDecimal
  cumulativeDepositUSD_gte: BigDecimal
  cumulativeDepositUSD_lte: BigDecimal
  cumulativeDepositUSD_in: [BigDecimal!]
  cumulativeDepositUSD_not_in: [BigDecimal!]
  totalBorrowBalanceUSD: BigDecimal
  totalBorrowBalanceUSD_not: BigDecimal
  totalBorrowBalanceUSD_gt: BigDecimal
  totalBorrowBalanceUSD_lt: BigDecimal
  totalBorrowBalanceUSD_gte: BigDecimal
  totalBorrowBalanceUSD_lte: BigDecimal
  totalBorrowBalanceUSD_in: [BigDecimal!]
  totalBorrowBalanceUSD_not_in: [BigDecimal!]
  cumulativeBorrowUSD: BigDecimal
  cumulativeBorrowUSD_not: BigDecimal
  cumulativeBorrowUSD_gt: BigDecimal
  cumulativeBorrowUSD_lt: BigDecimal
  cumulativeBorrowUSD_gte: BigDecimal
  cumulativeBorrowUSD_lte: BigDecimal
  cumulativeBorrowUSD_in: [BigDecimal!]
  cumulativeBorrowUSD_not_in: [BigDecimal!]
  cumulativeLiquidateUSD: BigDecimal
  cumulativeLiquidateUSD_not: BigDecimal
  cumulativeLiquidateUSD_gt: BigDecimal
  cumulativeLiquidateUSD_lt: BigDecimal
  cumulativeLiquidateUSD_gte: BigDecimal
  cumulativeLiquidateUSD_lte: BigDecimal
  cumulativeLiquidateUSD_in: [BigDecimal!]
  cumulativeLiquidateUSD_not_in: [BigDecimal!]
  inputTokenBalance: BigInt
  inputTokenBalance_not: BigInt
  inputTokenBalance_gt: BigInt
  inputTokenBalance_lt: BigInt
  inputTokenBalance_gte: BigInt
  inputTokenBalance_lte: BigInt
  inputTokenBalance_in: [BigInt!]
  inputTokenBalance_not_in: [BigInt!]
  inputTokenPriceUSD: BigDecimal
  inputTokenPriceUSD_not: BigDecimal
  inputTokenPriceUSD_gt: BigDecimal
  inputTokenPriceUSD_lt: BigDecimal
  inputTokenPriceUSD_gte: BigDecimal
  inputTokenPriceUSD_lte: BigDecimal
  inputTokenPriceUSD_in: [BigDecimal!]
  inputTokenPriceUSD_not_in: [BigDecimal!]
  exchangeRate: BigDecimal
  exchangeRate_not: BigDecimal
  exchangeRate_gt: BigDecimal
  exchangeRate_lt: BigDecimal
  exchangeRate_gte: BigDecimal
  exchangeRate_lte: BigDecimal
  exchangeRate_in: [BigDecimal!]
  exchangeRate_not_in: [BigDecimal!]
  _cumulativeSupplySideRevenueUSD: BigDecimal
  _cumulativeSupplySideRevenueUSD_not: BigDecimal
  _cumulativeSupplySideRevenueUSD_gt: BigDecimal
  _cumulativeSupplySideRevenueUSD_lt: BigDecimal
  _cumulativeSupplySideRevenueUSD_gte: BigDecimal
  _cumulativeSupplySideRevenueUSD_lte: BigDecimal
  _cumulativeSupplySideRevenueUSD_in: [BigDecimal!]
  _cumulativeSupplySideRevenueUSD_not_in: [BigDecimal!]
  _cumulativeProtocolSideRevenueUSD: BigDecimal
  _cumulativeProtocolSideRevenueUSD_not: BigDecimal
  _cumulativeProtocolSideRevenueUSD_gt: BigDecimal
  _cumulativeProtocolSideRevenueUSD_lt: BigDecimal
  _cumulativeProtocolSideRevenueUSD_gte: BigDecimal
  _cumulativeProtocolSideRevenueUSD_lte: BigDecimal
  _cumulativeProtocolSideRevenueUSD_in: [BigDecimal!]
  _cumulativeProtocolSideRevenueUSD_not_in: [BigDecimal!]
  _cumulativeTotalRevenueUSD: BigDecimal
  _cumulativeTotalRevenueUSD_not: BigDecimal
  _cumulativeTotalRevenueUSD_gt: BigDecimal
  _cumulativeTotalRevenueUSD_lt: BigDecimal
  _cumulativeTotalRevenueUSD_gte: BigDecimal
  _cumulativeTotalRevenueUSD_lte: BigDecimal
  _cumulativeTotalRevenueUSD_in: [BigDecimal!]
  _cumulativeTotalRevenueUSD_not_in: [BigDecimal!]
  _reserveFactor: BigDecimal
  _reserveFactor_not: BigDecimal
  _reserveFactor_gt: BigDecimal
  _reserveFactor_lt: BigDecimal
  _reserveFactor_gte: BigDecimal
  _reserveFactor_lte: BigDecimal
  _reserveFactor_in: [BigDecimal!]
  _reserveFactor_not_in: [BigDecimal!]
  _currentBorrowBalance: BigInt
  _currentBorrowBalance_not: BigInt
  _currentBorrowBalance_gt: BigInt
  _currentBorrowBalance_lt: BigInt
  _currentBorrowBalance_gte: BigInt
  _currentBorrowBalance_lte: BigInt
  _currentBorrowBalance_in: [BigInt!]
  _currentBorrowBalance_not_in: [BigInt!]
  _lastUpdateBlock: BigInt
  _lastUpdateBlock_not: BigInt
  _lastUpdateBlock_gt: BigInt
  _lastUpdateBlock_lt: BigInt
  _lastUpdateBlock_gte: BigInt
  _lastUpdateBlock_lte: BigInt
  _lastUpdateBlock_in: [BigInt!]
  _lastUpdateBlock_not_in: [BigInt!]
}

enum Market_orderBy {
  id
  protocol
  inputTokens
  outputToken
  rewardTokens
  vToken
  sToken
  reserveFactor
  totalRevenueUSD
  totalValueLockedUSD
  totalVolumeUSD
  totalStableValueLocked
  totalVariableValueLocked
  totalDepositUSD
  totalBorrowUSD
  inputTokenBalances
  inputTokenPricesUSD
  outputTokenSupply
  outputTokenPriceUSD
  rewardTokenEmissionsAmount
  rewardTokenEmissionsUSD
  createdTimestamp
  createdBlockNumber
  snapshots
  name
  isActive
  canUseAsCollateral
  canBorrowFrom
  protocolSideRevenueUSD
  supplySideRevenueUSD
  maximumLTV
  liquidationThreshold
  liquidationPenalty
  depositRate
  stableBorrowRate
  variableBorrowRate
  deposits
  withdraws
  borrows
  repays
  liquidates
  inputToken
  rates
  totalDepositBalanceUSD
  cumulativeDepositUSD
  totalBorrowBalanceUSD
  cumulativeBorrowUSD
  cumulativeLiquidateUSD
  inputTokenBalance
  inputTokenPriceUSD
  exchangeRate
  dailySnapshots
  hourlySnapshots
  _cumulativeSupplySideRevenueUSD
  _cumulativeProtocolSideRevenueUSD
  _cumulativeTotalRevenueUSD
  _reserveFactor
  _currentBorrowBalance
  _lastUpdateBlock
}

enum Network {
  ARBITRUM
  AURORA
  AVALANCHE
  BSC
  CELO
  CRONOS
  ETHEREUM
  FANTOM
  HARMONY
  MOONBEAM
  MOONRIVER
  OPTIMISM
  POLYGON
  XDAI
  ARBITRUM_ONE
  MAINNET
  FUSE
  NEAR_MAINNET
  MATIC
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

interface Protocol {
  """ Smart contract address of the protocol's main contract (Factory, Registry, etc) 
  """
  id: ID!
  """ Name of the protocol, including version. e.g. Uniswap v3 """
  name: String!
  """ Slug of protocol, including version. e.g. uniswap-v3 """
  slug: String!
  """ Version of the subgraph schema, in SemVer format (e.g. 1.0.0) """
  schemaVersion: String!
  """ Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) 
  """
  subgraphVersion: String!
  """ Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) 
  """
  methodologyVersion: String!
  """ The blockchain network this subgraph is indexing on """
  network: Network!
  """ The type of protocol (e.g. DEX, Lending, Yield, etc) """
  type: ProtocolType!
  """ # of total/cumulative unique users """
  totalUniqueUsers: Int!
  """ Total revenue in USD of all markets on the protocol """
  totalRevenueUSD: BigDecimal!
  """ Current TVL (Total Value Locked) of the entire protocol """
  totalValueLockedUSD: BigDecimal!
  """ Total volume in USD """
  totalVolumeUSD: BigDecimal!
  usageMetrics(skip: Int = 0, first: Int = 100, orderBy: UsageMetricsDailySnapshot_orderBy, orderDirection: OrderDirection, where: UsageMetricsDailySnapshot_filter): [UsageMetricsDailySnapshot!]!
  """ Daily financial metrics for this protocol """
  financialMetrics(skip: Int = 0, first: Int = 100, orderBy: FinancialsDailySnapshot_orderBy, orderDirection: OrderDirection, where: FinancialsDailySnapshot_filter): [FinancialsDailySnapshot!]!
  """ Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. 
  """
  protocolControlledValueUSD: BigDecimal
  """ # of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  cumulativeSupplySideRevenueUSD: BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  cumulativeProtocolSideRevenueUSD: BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  cumulativeTotalRevenueUSD: BigDecimal!
  """ Daily usage metrics for this protocol """
  dailyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: UsageMetricsDailySnapshot_orderBy, orderDirection: OrderDirection, where: UsageMetricsDailySnapshot_filter): [UsageMetricsDailySnapshot!]!
  """ Hourly usage metrics for this protocol """
  hourlyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: UsageMetricsHourlySnapshot_orderBy, orderDirection: OrderDirection, where: UsageMetricsHourlySnapshot_filter): [UsageMetricsHourlySnapshot!]!
}

enum ProtocolType {
  EXCHANGE
  LENDING
  YIELD
  BRIDGE
  GENERIC
}

input Protocol_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  slug: String
  slug_not: String
  slug_gt: String
  slug_lt: String
  slug_gte: String
  slug_lte: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_contains: String
  slug_contains_nocase: String
  slug_not_contains: String
  slug_not_contains_nocase: String
  slug_starts_with: String
  slug_starts_with_nocase: String
  slug_not_starts_with: String
  slug_not_starts_with_nocase: String
  slug_ends_with: String
  slug_ends_with_nocase: String
  slug_not_ends_with: String
  slug_not_ends_with_nocase: String
  schemaVersion: String
  schemaVersion_not: String
  schemaVersion_gt: String
  schemaVersion_lt: String
  schemaVersion_gte: String
  schemaVersion_lte: String
  schemaVersion_in: [String!]
  schemaVersion_not_in: [String!]
  schemaVersion_contains: String
  schemaVersion_contains_nocase: String
  schemaVersion_not_contains: String
  schemaVersion_not_contains_nocase: String
  schemaVersion_starts_with: String
  schemaVersion_starts_with_nocase: String
  schemaVersion_not_starts_with: String
  schemaVersion_not_starts_with_nocase: String
  schemaVersion_ends_with: String
  schemaVersion_ends_with_nocase: String
  schemaVersion_not_ends_with: String
  schemaVersion_not_ends_with_nocase: String
  subgraphVersion: String
  subgraphVersion_not: String
  subgraphVersion_gt: String
  subgraphVersion_lt: String
  subgraphVersion_gte: String
  subgraphVersion_lte: String
  subgraphVersion_in: [String!]
  subgraphVersion_not_in: [String!]
  subgraphVersion_contains: String
  subgraphVersion_contains_nocase: String
  subgraphVersion_not_contains: String
  subgraphVersion_not_contains_nocase: String
  subgraphVersion_starts_with: String
  subgraphVersion_starts_with_nocase: String
  subgraphVersion_not_starts_with: String
  subgraphVersion_not_starts_with_nocase: String
  subgraphVersion_ends_with: String
  subgraphVersion_ends_with_nocase: String
  subgraphVersion_not_ends_with: String
  subgraphVersion_not_ends_with_nocase: String
  methodologyVersion: String
  methodologyVersion_not: String
  methodologyVersion_gt: String
  methodologyVersion_lt: String
  methodologyVersion_gte: String
  methodologyVersion_lte: String
  methodologyVersion_in: [String!]
  methodologyVersion_not_in: [String!]
  methodologyVersion_contains: String
  methodologyVersion_contains_nocase: String
  methodologyVersion_not_contains: String
  methodologyVersion_not_contains_nocase: String
  methodologyVersion_starts_with: String
  methodologyVersion_starts_with_nocase: String
  methodologyVersion_not_starts_with: String
  methodologyVersion_not_starts_with_nocase: String
  methodologyVersion_ends_with: String
  methodologyVersion_ends_with_nocase: String
  methodologyVersion_not_ends_with: String
  methodologyVersion_not_ends_with_nocase: String
  network: Network
  network_not: Network
  network_in: [Network!]
  network_not_in: [Network!]
  type: ProtocolType
  type_not: ProtocolType
  type_in: [ProtocolType!]
  type_not_in: [ProtocolType!]
  totalUniqueUsers: Int
  totalUniqueUsers_not: Int
  totalUniqueUsers_gt: Int
  totalUniqueUsers_lt: Int
  totalUniqueUsers_gte: Int
  totalUniqueUsers_lte: Int
  totalUniqueUsers_in: [Int!]
  totalUniqueUsers_not_in: [Int!]
  totalRevenueUSD: BigDecimal
  totalRevenueUSD_not: BigDecimal
  totalRevenueUSD_gt: BigDecimal
  totalRevenueUSD_lt: BigDecimal
  totalRevenueUSD_gte: BigDecimal
  totalRevenueUSD_lte: BigDecimal
  totalRevenueUSD_in: [BigDecimal!]
  totalRevenueUSD_not_in: [BigDecimal!]
  totalValueLockedUSD: BigDecimal
  totalValueLockedUSD_not: BigDecimal
  totalValueLockedUSD_gt: BigDecimal
  totalValueLockedUSD_lt: BigDecimal
  totalValueLockedUSD_gte: BigDecimal
  totalValueLockedUSD_lte: BigDecimal
  totalValueLockedUSD_in: [BigDecimal!]
  totalValueLockedUSD_not_in: [BigDecimal!]
  totalVolumeUSD: BigDecimal
  totalVolumeUSD_not: BigDecimal
  totalVolumeUSD_gt: BigDecimal
  totalVolumeUSD_lt: BigDecimal
  totalVolumeUSD_gte: BigDecimal
  totalVolumeUSD_lte: BigDecimal
  totalVolumeUSD_in: [BigDecimal!]
  totalVolumeUSD_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  protocolControlledValueUSD: BigDecimal
  protocolControlledValueUSD_not: BigDecimal
  protocolControlledValueUSD_gt: BigDecimal
  protocolControlledValueUSD_lt: BigDecimal
  protocolControlledValueUSD_gte: BigDecimal
  protocolControlledValueUSD_lte: BigDecimal
  protocolControlledValueUSD_in: [BigDecimal!]
  protocolControlledValueUSD_not_in: [BigDecimal!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  cumulativeSupplySideRevenueUSD: BigDecimal
  cumulativeSupplySideRevenueUSD_not: BigDecimal
  cumulativeSupplySideRevenueUSD_gt: BigDecimal
  cumulativeSupplySideRevenueUSD_lt: BigDecimal
  cumulativeSupplySideRevenueUSD_gte: BigDecimal
  cumulativeSupplySideRevenueUSD_lte: BigDecimal
  cumulativeSupplySideRevenueUSD_in: [BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD: BigDecimal
  cumulativeProtocolSideRevenueUSD_not: BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [BigDecimal!]
  cumulativeTotalRevenueUSD: BigDecimal
  cumulativeTotalRevenueUSD_not: BigDecimal
  cumulativeTotalRevenueUSD_gt: BigDecimal
  cumulativeTotalRevenueUSD_lt: BigDecimal
  cumulativeTotalRevenueUSD_gte: BigDecimal
  cumulativeTotalRevenueUSD_lte: BigDecimal
  cumulativeTotalRevenueUSD_in: [BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [BigDecimal!]
}

enum Protocol_orderBy {
  id
  name
  slug
  schemaVersion
  subgraphVersion
  methodologyVersion
  network
  type
  totalUniqueUsers
  totalRevenueUSD
  totalValueLockedUSD
  totalVolumeUSD
  usageMetrics
  financialMetrics
  protocolControlledValueUSD
  cumulativeUniqueUsers
  cumulativeSupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  dailyUsageMetrics
  hourlyUsageMetrics
}

type Repay implements Event {
  """ { Transaction hash }-{ Log index } """
  id: ID!
  """ Transaction hash of the transaction that emitted this event """
  hash: String!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ The protocol this transaction belongs to """
  protocol: LendingProtocol!
  """ Market that tokens are repaid to """
  to: String!
  """ Address that sent tokens """
  from: String!
  """ The number of days since Unix epoch time, used to signify which financial/metric dailySnapshots this transaction is recorded in 
  """
  snapshotId: String!
  """ Block number of this event """
  blockNumber: BigInt!
  """ Timestamp of this event """
  timestamp: BigInt!
  """ The market this transaction interacted with """
  market: Market!
  """ Token repaid """
  asset: Token!
  """ Amount of token repaid in native units """
  amount: BigInt!
  """ Amount of token repaid in USD """
  amountUSD: BigDecimal
}

input Repay_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hash: String
  hash_not: String
  hash_gt: String
  hash_lt: String
  hash_gte: String
  hash_lte: String
  hash_in: [String!]
  hash_not_in: [String!]
  hash_contains: String
  hash_contains_nocase: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  snapshotId: String
  snapshotId_not: String
  snapshotId_gt: String
  snapshotId_lt: String
  snapshotId_gte: String
  snapshotId_lte: String
  snapshotId_in: [String!]
  snapshotId_not_in: [String!]
  snapshotId_contains: String
  snapshotId_contains_nocase: String
  snapshotId_not_contains: String
  snapshotId_not_contains_nocase: String
  snapshotId_starts_with: String
  snapshotId_starts_with_nocase: String
  snapshotId_not_starts_with: String
  snapshotId_not_starts_with_nocase: String
  snapshotId_ends_with: String
  snapshotId_ends_with_nocase: String
  snapshotId_not_ends_with: String
  snapshotId_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amountUSD: BigDecimal
  amountUSD_not: BigDecimal
  amountUSD_gt: BigDecimal
  amountUSD_lt: BigDecimal
  amountUSD_gte: BigDecimal
  amountUSD_lte: BigDecimal
  amountUSD_in: [BigDecimal!]
  amountUSD_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Repay_orderBy {
  id
  hash
  logIndex
  protocol
  to
  from
  snapshotId
  blockNumber
  timestamp
  market
  asset
  amount
  amountUSD
}

type RewardToken {
  """ { Reward token type }-{ Smart contract address of the reward token } """
  id: ID!
  """ Mirrored from the smart contract """
  name: String!
  symbol: String!
  decimals: Int!
  """ The type of the reward token """
  type: RewardTokenType!
  """ Reference to the actual token """
  token: Token!
}

enum RewardTokenType {
  """ For reward tokens awarded to LPs/lenders """
  DEPOSIT
  """ For reward tokens awarded to borrowers """
  BORROW
}

input RewardToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  type: RewardTokenType
  type_not: RewardTokenType
  type_in: [RewardTokenType!]
  type_not_in: [RewardTokenType!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
}

enum RewardToken_orderBy {
  id
  name
  symbol
  decimals
  type
  token
}

enum RiskType {
  """ Global risk means each users position in a market is combined for one score to determine if they can be liquidated 
  """
  GLOBAL
  """ Isolated risk means each users position in a market or CDP is isolated for risk of liquidation 
  """
  ISOLATED
}

type Token {
  """ Smart contract address of the token """
  id: ID!
  """ Name of the token, mirrored from the smart contract """
  name: String!
  """ Symbol of the token, mirrored from the smart contract """
  symbol: String!
  """ The number of decimal places this token uses, default to 18 """
  decimals: Int!
  underlyingAsset: String!
  """ Optional field to track the price of a token, mostly for caching purposes 
  """
  lastPriceUSD: BigDecimal
  """ Optional field to track the block number of the last token price """
  lastPriceBlockNumber: BigInt
}

input Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  underlyingAsset: String
  underlyingAsset_not: String
  underlyingAsset_gt: String
  underlyingAsset_lt: String
  underlyingAsset_gte: String
  underlyingAsset_lte: String
  underlyingAsset_in: [String!]
  underlyingAsset_not_in: [String!]
  underlyingAsset_contains: String
  underlyingAsset_contains_nocase: String
  underlyingAsset_not_contains: String
  underlyingAsset_not_contains_nocase: String
  underlyingAsset_starts_with: String
  underlyingAsset_starts_with_nocase: String
  underlyingAsset_not_starts_with: String
  underlyingAsset_not_starts_with_nocase: String
  underlyingAsset_ends_with: String
  underlyingAsset_ends_with_nocase: String
  underlyingAsset_not_ends_with: String
  underlyingAsset_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  lastPriceUSD: BigDecimal
  lastPriceUSD_not: BigDecimal
  lastPriceUSD_gt: BigDecimal
  lastPriceUSD_lt: BigDecimal
  lastPriceUSD_gte: BigDecimal
  lastPriceUSD_lte: BigDecimal
  lastPriceUSD_in: [BigDecimal!]
  lastPriceUSD_not_in: [BigDecimal!]
  lastPriceBlockNumber: BigInt
  lastPriceBlockNumber_not: BigInt
  lastPriceBlockNumber_gt: BigInt
  lastPriceBlockNumber_lt: BigInt
  lastPriceBlockNumber_gte: BigInt
  lastPriceBlockNumber_lte: BigInt
  lastPriceBlockNumber_in: [BigInt!]
  lastPriceBlockNumber_not_in: [BigInt!]
}

enum Token_orderBy {
  id
  name
  symbol
  decimals
  underlyingAsset
  lastPriceUSD
  lastPriceBlockNumber
}

type UsageMetricsDailySnapshot {
  """ ID is # of days since Unix epoch time """
  id: ID!
  """ Protocol this snapshot is associated with """
  protocol: LendingProtocol!
  """ # of unique daily active users """
  activeUsers: Int!
  """ # of total/cumulative unique users """
  totalUniqueUsers: Int!
  """ Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface. 
  """
  dailyTransactionCount: Int!
  """ Block number of this snapshot """
  blockNumber: BigInt!
  """ Timestamp of this snapshot """
  timestamp: BigInt!
  """ # of unique daily active users """
  dailyActiveUsers: Int!
  """ # of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Total number of deposits in a day """
  dailyDepositCount: Int!
  """ Total number of withdrawals in a day """
  dailyWithdrawCount: Int!
  """ Total number of borrows/mints in a day """
  dailyBorrowCount: Int!
  """ Total number of repayments/burns in a day """
  dailyRepayCount: Int!
  """ Total number of liquidations in a day """
  dailyLiquidateCount: Int!
}

input UsageMetricsDailySnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  activeUsers: Int
  activeUsers_not: Int
  activeUsers_gt: Int
  activeUsers_lt: Int
  activeUsers_gte: Int
  activeUsers_lte: Int
  activeUsers_in: [Int!]
  activeUsers_not_in: [Int!]
  totalUniqueUsers: Int
  totalUniqueUsers_not: Int
  totalUniqueUsers_gt: Int
  totalUniqueUsers_lt: Int
  totalUniqueUsers_gte: Int
  totalUniqueUsers_lte: Int
  totalUniqueUsers_in: [Int!]
  totalUniqueUsers_not_in: [Int!]
  dailyTransactionCount: Int
  dailyTransactionCount_not: Int
  dailyTransactionCount_gt: Int
  dailyTransactionCount_lt: Int
  dailyTransactionCount_gte: Int
  dailyTransactionCount_lte: Int
  dailyTransactionCount_in: [Int!]
  dailyTransactionCount_not_in: [Int!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  dailyActiveUsers: Int
  dailyActiveUsers_not: Int
  dailyActiveUsers_gt: Int
  dailyActiveUsers_lt: Int
  dailyActiveUsers_gte: Int
  dailyActiveUsers_lte: Int
  dailyActiveUsers_in: [Int!]
  dailyActiveUsers_not_in: [Int!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  dailyDepositCount: Int
  dailyDepositCount_not: Int
  dailyDepositCount_gt: Int
  dailyDepositCount_lt: Int
  dailyDepositCount_gte: Int
  dailyDepositCount_lte: Int
  dailyDepositCount_in: [Int!]
  dailyDepositCount_not_in: [Int!]
  dailyWithdrawCount: Int
  dailyWithdrawCount_not: Int
  dailyWithdrawCount_gt: Int
  dailyWithdrawCount_lt: Int
  dailyWithdrawCount_gte: Int
  dailyWithdrawCount_lte: Int
  dailyWithdrawCount_in: [Int!]
  dailyWithdrawCount_not_in: [Int!]
  dailyBorrowCount: Int
  dailyBorrowCount_not: Int
  dailyBorrowCount_gt: Int
  dailyBorrowCount_lt: Int
  dailyBorrowCount_gte: Int
  dailyBorrowCount_lte: Int
  dailyBorrowCount_in: [Int!]
  dailyBorrowCount_not_in: [Int!]
  dailyRepayCount: Int
  dailyRepayCount_not: Int
  dailyRepayCount_gt: Int
  dailyRepayCount_lt: Int
  dailyRepayCount_gte: Int
  dailyRepayCount_lte: Int
  dailyRepayCount_in: [Int!]
  dailyRepayCount_not_in: [Int!]
  dailyLiquidateCount: Int
  dailyLiquidateCount_not: Int
  dailyLiquidateCount_gt: Int
  dailyLiquidateCount_lt: Int
  dailyLiquidateCount_gte: Int
  dailyLiquidateCount_lte: Int
  dailyLiquidateCount_in: [Int!]
  dailyLiquidateCount_not_in: [Int!]
}

enum UsageMetricsDailySnapshot_orderBy {
  id
  protocol
  activeUsers
  totalUniqueUsers
  dailyTransactionCount
  blockNumber
  timestamp
  dailyActiveUsers
  cumulativeUniqueUsers
  dailyDepositCount
  dailyWithdrawCount
  dailyBorrowCount
  dailyRepayCount
  dailyLiquidateCount
}

type Withdraw implements Event {
  """ { Transaction hash }-{ Log index }"""
  id: ID!
  """ Transaction hash of the transaction that emitted this event """
  hash: String!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ The protocol this transaction belongs to """
  protocol: LendingProtocol!
  """ Address that received tokens """
  to: String!
  """ Market that tokens are withdrawn from """
  from: String!
  """ The number of days since Unix epoch time, used to signify which financial/metric dailySnapshots this transaction is recorded in 
  """
  snapshotId: String!
  """ Block number of this event """
  blockNumber: BigInt!
  """ Timestamp of this event """
  timestamp: BigInt!
  """ The market this transaction interacted with """
  market: Market!
  """ Token withdrawn """
  asset: Token!
  """ Amount of token withdrawn in native units """
  amount: BigInt!
  """ Amount of token withdrawn in USD """
  amountUSD: BigDecimal!
}

input Withdraw_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hash: String
  hash_not: String
  hash_gt: String
  hash_lt: String
  hash_gte: String
  hash_lte: String
  hash_in: [String!]
  hash_not_in: [String!]
  hash_contains: String
  hash_contains_nocase: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  snapshotId: String
  snapshotId_not: String
  snapshotId_gt: String
  snapshotId_lt: String
  snapshotId_gte: String
  snapshotId_lte: String
  snapshotId_in: [String!]
  snapshotId_not_in: [String!]
  snapshotId_contains: String
  snapshotId_contains_nocase: String
  snapshotId_not_contains: String
  snapshotId_not_contains_nocase: String
  snapshotId_starts_with: String
  snapshotId_starts_with_nocase: String
  snapshotId_not_starts_with: String
  snapshotId_not_starts_with_nocase: String
  snapshotId_ends_with: String
  snapshotId_ends_with_nocase: String
  snapshotId_not_ends_with: String
  snapshotId_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amountUSD: BigDecimal
  amountUSD_not: BigDecimal
  amountUSD_gt: BigDecimal
  amountUSD_lt: BigDecimal
  amountUSD_gte: BigDecimal
  amountUSD_lte: BigDecimal
  amountUSD_in: [BigDecimal!]
  amountUSD_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Withdraw_orderBy {
  id
  hash
  logIndex
  protocol
  to
  from
  snapshotId
  blockNumber
  timestamp
  market
  asset
  amount
  amountUSD
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type ActiveAccount {
  """ { Address of the account }-{ Days since Unix epoch }-{ [Optional] HH: hour of the day } 
  """
  id: ID!
}

input ActiveAccount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum ActiveAccount_orderBy {
  id
}

type InterestRate {
  """ { Interest rate side }-{ Interest rate type }-{ Market ID } """
  id: ID!
  """ Interest rate in percentage APY. E.g. 5.21% should be stored as 5.21 """
  rate: BigDecimal!
  """ Duration of the loan in days. Only applies to fixed term lending (e.g. Notional) 
  """
  duration: Int
  """ Maturity of the loan in block height. Only applies to fixed term lending (e.g. Notional) 
  """
  maturityBlock: BigInt
  """ The party the interest is paid to / received from """
  side: InterestRateSide!
  """ The type of interest rate (e.g. stable, fixed, variable, etc) """
  type: InterestRateType!
}

enum InterestRateSide {
  """ Interest rate accrued by lenders """
  LENDER
  """ Interest rate paid by borrowers """
  BORROWER
}

enum InterestRateType {
  """ Stable interest rate (e.g. Aave) """
  STABLE
  """ Variable interest rate (e.g. Compound) """
  VARIABLE
  """ Fixed term interest rate (e.g. Notional) """
  FIXED_TERM
}

input InterestRate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  rate: BigDecimal
  rate_not: BigDecimal
  rate_gt: BigDecimal
  rate_lt: BigDecimal
  rate_gte: BigDecimal
  rate_lte: BigDecimal
  rate_in: [BigDecimal!]
  rate_not_in: [BigDecimal!]
  duration: Int
  duration_not: Int
  duration_gt: Int
  duration_lt: Int
  duration_gte: Int
  duration_lte: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  maturityBlock: BigInt
  maturityBlock_not: BigInt
  maturityBlock_gt: BigInt
  maturityBlock_lt: BigInt
  maturityBlock_gte: BigInt
  maturityBlock_lte: BigInt
  maturityBlock_in: [BigInt!]
  maturityBlock_not_in: [BigInt!]
  side: InterestRateSide
  side_not: InterestRateSide
  side_in: [InterestRateSide!]
  side_not_in: [InterestRateSide!]
  type: InterestRateType
  type_not: InterestRateType
  type_in: [InterestRateType!]
  type_not_in: [InterestRateType!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum InterestRate_orderBy {
  id
  rate
  duration
  maturityBlock
  side
  type
}

type MarketHourlySnapshot {
  """ { Smart contract address of the market }-{ # of hours since Unix epoch time } 
  """
  id: ID!
  """ The protocol this snapshot belongs to """
  protocol: LendingProtocol!
  """ The pool this snapshot belongs to """
  market: Market!
  """ Block number of this snapshot """
  blockNumber: BigInt!
  """ Timestamp of this snapshot """
  timestamp: BigInt!
  """ All interest rates / fees allowed in the market. Interest rate should be in APY percentage 
  """
  rates(skip: Int = 0, first: Int = 100, orderBy: InterestRate_orderBy, orderDirection: OrderDirection, where: InterestRate_filter): [InterestRate!]!
  """ Current TVL (Total Value Locked) of this market """
  totalValueLockedUSD: BigDecimal!
  """ Current balance of all deposited assets (not historical cumulative), in USD. Same as pool TVL. 
  """
  totalDepositBalanceUSD: BigDecimal!
  """ Sum of all deposits made in a given hour, in USD """
  hourlyDepositUSD: BigDecimal!
  """ Sum of all historical deposits in USD (only considers deposits and not withdrawals) 
  """
  cumulativeDepositUSD: BigDecimal!
  """ Current balance of all borrowed/minted assets (not historical cumulative), in USD. 
  """
  totalBorrowBalanceUSD: BigDecimal!
  """ Sum of all borrows/mints made in a given hour, in USD """
  hourlyBorrowUSD: BigDecimal!
  """ Sum of all historical borrows/mints in USD (i.e. total loan origination) 
  """
  cumulativeBorrowUSD: BigDecimal!
  """ Total assets liquidated in a given hour, in USD. """
  hourlyLiquidateUSD: BigDecimal!
  """ Sum of all historical liquidations in USD """
  cumulativeLiquidateUSD: BigDecimal!
  """ Amount of input token in the market. """
  inputTokenBalance: BigInt!
  """ Price per share of input token in USD """
  inputTokenPriceUSD: BigDecimal!
  """ Total supply of output token """
  outputTokenSupply: BigInt!
  """ Price per share of output token in USD """
  outputTokenPriceUSD: BigDecimal!
  """ Amount of input token per full share of output token. Only applies when the output token exists 
  """
  exchangeRate: BigDecimal
  """ Per-block reward token emission as of the current block normalized to a day (not hour), in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsAmount: [BigInt!]
  """ Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsUSD: [BigDecimal!]
}

input MarketHourlySnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  rates: [String!]
  rates_not: [String!]
  rates_contains: [String!]
  rates_contains_nocase: [String!]
  rates_not_contains: [String!]
  rates_not_contains_nocase: [String!]
  totalValueLockedUSD: BigDecimal
  totalValueLockedUSD_not: BigDecimal
  totalValueLockedUSD_gt: BigDecimal
  totalValueLockedUSD_lt: BigDecimal
  totalValueLockedUSD_gte: BigDecimal
  totalValueLockedUSD_lte: BigDecimal
  totalValueLockedUSD_in: [BigDecimal!]
  totalValueLockedUSD_not_in: [BigDecimal!]
  totalDepositBalanceUSD: BigDecimal
  totalDepositBalanceUSD_not: BigDecimal
  totalDepositBalanceUSD_gt: BigDecimal
  totalDepositBalanceUSD_lt: BigDecimal
  totalDepositBalanceUSD_gte: BigDecimal
  totalDepositBalanceUSD_lte: BigDecimal
  totalDepositBalanceUSD_in: [BigDecimal!]
  totalDepositBalanceUSD_not_in: [BigDecimal!]
  hourlyDepositUSD: BigDecimal
  hourlyDepositUSD_not: BigDecimal
  hourlyDepositUSD_gt: BigDecimal
  hourlyDepositUSD_lt: BigDecimal
  hourlyDepositUSD_gte: BigDecimal
  hourlyDepositUSD_lte: BigDecimal
  hourlyDepositUSD_in: [BigDecimal!]
  hourlyDepositUSD_not_in: [BigDecimal!]
  cumulativeDepositUSD: BigDecimal
  cumulativeDepositUSD_not: BigDecimal
  cumulativeDepositUSD_gt: BigDecimal
  cumulativeDepositUSD_lt: BigDecimal
  cumulativeDepositUSD_gte: BigDecimal
  cumulativeDepositUSD_lte: BigDecimal
  cumulativeDepositUSD_in: [BigDecimal!]
  cumulativeDepositUSD_not_in: [BigDecimal!]
  totalBorrowBalanceUSD: BigDecimal
  totalBorrowBalanceUSD_not: BigDecimal
  totalBorrowBalanceUSD_gt: BigDecimal
  totalBorrowBalanceUSD_lt: BigDecimal
  totalBorrowBalanceUSD_gte: BigDecimal
  totalBorrowBalanceUSD_lte: BigDecimal
  totalBorrowBalanceUSD_in: [BigDecimal!]
  totalBorrowBalanceUSD_not_in: [BigDecimal!]
  hourlyBorrowUSD: BigDecimal
  hourlyBorrowUSD_not: BigDecimal
  hourlyBorrowUSD_gt: BigDecimal
  hourlyBorrowUSD_lt: BigDecimal
  hourlyBorrowUSD_gte: BigDecimal
  hourlyBorrowUSD_lte: BigDecimal
  hourlyBorrowUSD_in: [BigDecimal!]
  hourlyBorrowUSD_not_in: [BigDecimal!]
  cumulativeBorrowUSD: BigDecimal
  cumulativeBorrowUSD_not: BigDecimal
  cumulativeBorrowUSD_gt: BigDecimal
  cumulativeBorrowUSD_lt: BigDecimal
  cumulativeBorrowUSD_gte: BigDecimal
  cumulativeBorrowUSD_lte: BigDecimal
  cumulativeBorrowUSD_in: [BigDecimal!]
  cumulativeBorrowUSD_not_in: [BigDecimal!]
  hourlyLiquidateUSD: BigDecimal
  hourlyLiquidateUSD_not: BigDecimal
  hourlyLiquidateUSD_gt: BigDecimal
  hourlyLiquidateUSD_lt: BigDecimal
  hourlyLiquidateUSD_gte: BigDecimal
  hourlyLiquidateUSD_lte: BigDecimal
  hourlyLiquidateUSD_in: [BigDecimal!]
  hourlyLiquidateUSD_not_in: [BigDecimal!]
  cumulativeLiquidateUSD: BigDecimal
  cumulativeLiquidateUSD_not: BigDecimal
  cumulativeLiquidateUSD_gt: BigDecimal
  cumulativeLiquidateUSD_lt: BigDecimal
  cumulativeLiquidateUSD_gte: BigDecimal
  cumulativeLiquidateUSD_lte: BigDecimal
  cumulativeLiquidateUSD_in: [BigDecimal!]
  cumulativeLiquidateUSD_not_in: [BigDecimal!]
  inputTokenBalance: BigInt
  inputTokenBalance_not: BigInt
  inputTokenBalance_gt: BigInt
  inputTokenBalance_lt: BigInt
  inputTokenBalance_gte: BigInt
  inputTokenBalance_lte: BigInt
  inputTokenBalance_in: [BigInt!]
  inputTokenBalance_not_in: [BigInt!]
  inputTokenPriceUSD: BigDecimal
  inputTokenPriceUSD_not: BigDecimal
  inputTokenPriceUSD_gt: BigDecimal
  inputTokenPriceUSD_lt: BigDecimal
  inputTokenPriceUSD_gte: BigDecimal
  inputTokenPriceUSD_lte: BigDecimal
  inputTokenPriceUSD_in: [BigDecimal!]
  inputTokenPriceUSD_not_in: [BigDecimal!]
  outputTokenSupply: BigInt
  outputTokenSupply_not: BigInt
  outputTokenSupply_gt: BigInt
  outputTokenSupply_lt: BigInt
  outputTokenSupply_gte: BigInt
  outputTokenSupply_lte: BigInt
  outputTokenSupply_in: [BigInt!]
  outputTokenSupply_not_in: [BigInt!]
  outputTokenPriceUSD: BigDecimal
  outputTokenPriceUSD_not: BigDecimal
  outputTokenPriceUSD_gt: BigDecimal
  outputTokenPriceUSD_lt: BigDecimal
  outputTokenPriceUSD_gte: BigDecimal
  outputTokenPriceUSD_lte: BigDecimal
  outputTokenPriceUSD_in: [BigDecimal!]
  outputTokenPriceUSD_not_in: [BigDecimal!]
  exchangeRate: BigDecimal
  exchangeRate_not: BigDecimal
  exchangeRate_gt: BigDecimal
  exchangeRate_lt: BigDecimal
  exchangeRate_gte: BigDecimal
  exchangeRate_lte: BigDecimal
  exchangeRate_in: [BigDecimal!]
  exchangeRate_not_in: [BigDecimal!]
  rewardTokenEmissionsAmount: [BigInt!]
  rewardTokenEmissionsAmount_not: [BigInt!]
  rewardTokenEmissionsAmount_contains: [BigInt!]
  rewardTokenEmissionsAmount_contains_nocase: [BigInt!]
  rewardTokenEmissionsAmount_not_contains: [BigInt!]
  rewardTokenEmissionsAmount_not_contains_nocase: [BigInt!]
  rewardTokenEmissionsUSD: [BigDecimal!]
  rewardTokenEmissionsUSD_not: [BigDecimal!]
  rewardTokenEmissionsUSD_contains: [BigDecimal!]
  rewardTokenEmissionsUSD_contains_nocase: [BigDecimal!]
  rewardTokenEmissionsUSD_not_contains: [BigDecimal!]
  rewardTokenEmissionsUSD_not_contains_nocase: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum MarketHourlySnapshot_orderBy {
  id
  protocol
  market
  blockNumber
  timestamp
  rates
  totalValueLockedUSD
  totalDepositBalanceUSD
  hourlyDepositUSD
  cumulativeDepositUSD
  totalBorrowBalanceUSD
  hourlyBorrowUSD
  cumulativeBorrowUSD
  hourlyLiquidateUSD
  cumulativeLiquidateUSD
  inputTokenBalance
  inputTokenPriceUSD
  outputTokenSupply
  outputTokenPriceUSD
  exchangeRate
  rewardTokenEmissionsAmount
  rewardTokenEmissionsUSD
}

type UsageMetricsHourlySnapshot {
  """ { # of hours since Unix epoch time } """
  id: ID!
  """ Protocol this snapshot is associated with """
  protocol: LendingProtocol!
  """ # of unique hourly active users """
  hourlyActiveUsers: Int!
  """ # of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface. 
  """
  hourlyTransactionCount: Int!
  """ Total number of deposits in an hour """
  hourlyDepositCount: Int!
  """ Total number of withdrawals in an hour """
  hourlyWithdrawCount: Int!
  """ Total number of borrows/mints in an hour """
  hourlyBorrowCount: Int!
  """ Total number of repayments/burns in an hour """
  hourlyRepayCount: Int!
  """ Total number of liquidations in an hour """
  hourlyLiquidateCount: Int!
  """ Block number of this snapshot """
  blockNumber: BigInt!
  """ Timestamp of this snapshot """
  timestamp: BigInt!
}

input UsageMetricsHourlySnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  hourlyActiveUsers: Int
  hourlyActiveUsers_not: Int
  hourlyActiveUsers_gt: Int
  hourlyActiveUsers_lt: Int
  hourlyActiveUsers_gte: Int
  hourlyActiveUsers_lte: Int
  hourlyActiveUsers_in: [Int!]
  hourlyActiveUsers_not_in: [Int!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  hourlyTransactionCount: Int
  hourlyTransactionCount_not: Int
  hourlyTransactionCount_gt: Int
  hourlyTransactionCount_lt: Int
  hourlyTransactionCount_gte: Int
  hourlyTransactionCount_lte: Int
  hourlyTransactionCount_in: [Int!]
  hourlyTransactionCount_not_in: [Int!]
  hourlyDepositCount: Int
  hourlyDepositCount_not: Int
  hourlyDepositCount_gt: Int
  hourlyDepositCount_lt: Int
  hourlyDepositCount_gte: Int
  hourlyDepositCount_lte: Int
  hourlyDepositCount_in: [Int!]
  hourlyDepositCount_not_in: [Int!]
  hourlyWithdrawCount: Int
  hourlyWithdrawCount_not: Int
  hourlyWithdrawCount_gt: Int
  hourlyWithdrawCount_lt: Int
  hourlyWithdrawCount_gte: Int
  hourlyWithdrawCount_lte: Int
  hourlyWithdrawCount_in: [Int!]
  hourlyWithdrawCount_not_in: [Int!]
  hourlyBorrowCount: Int
  hourlyBorrowCount_not: Int
  hourlyBorrowCount_gt: Int
  hourlyBorrowCount_lt: Int
  hourlyBorrowCount_gte: Int
  hourlyBorrowCount_lte: Int
  hourlyBorrowCount_in: [Int!]
  hourlyBorrowCount_not_in: [Int!]
  hourlyRepayCount: Int
  hourlyRepayCount_not: Int
  hourlyRepayCount_gt: Int
  hourlyRepayCount_lt: Int
  hourlyRepayCount_gte: Int
  hourlyRepayCount_lte: Int
  hourlyRepayCount_in: [Int!]
  hourlyRepayCount_not_in: [Int!]
  hourlyLiquidateCount: Int
  hourlyLiquidateCount_not: Int
  hourlyLiquidateCount_gt: Int
  hourlyLiquidateCount_lt: Int
  hourlyLiquidateCount_gte: Int
  hourlyLiquidateCount_lte: Int
  hourlyLiquidateCount_in: [Int!]
  hourlyLiquidateCount_not_in: [Int!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum UsageMetricsHourlySnapshot_orderBy {
  id
  protocol
  hourlyActiveUsers
  cumulativeUniqueUsers
  hourlyTransactionCount
  hourlyDepositCount
  hourlyWithdrawCount
  hourlyBorrowCount
  hourlyRepayCount
  hourlyLiquidateCount
  blockNumber
  timestamp
}

type _CircularBuffer {
  id: ID!
  blocks: [Int!]!
  windowStartIndex: Int!
  nextIndex: Int!
  bufferSize: Int!
  blocksPerDay: BigDecimal!
}

input _CircularBuffer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blocks: [Int!]
  blocks_not: [Int!]
  blocks_contains: [Int!]
  blocks_contains_nocase: [Int!]
  blocks_not_contains: [Int!]
  blocks_not_contains_nocase: [Int!]
  windowStartIndex: Int
  windowStartIndex_not: Int
  windowStartIndex_gt: Int
  windowStartIndex_lt: Int
  windowStartIndex_gte: Int
  windowStartIndex_lte: Int
  windowStartIndex_in: [Int!]
  windowStartIndex_not_in: [Int!]
  nextIndex: Int
  nextIndex_not: Int
  nextIndex_gt: Int
  nextIndex_lt: Int
  nextIndex_gte: Int
  nextIndex_lte: Int
  nextIndex_in: [Int!]
  nextIndex_not_in: [Int!]
  bufferSize: Int
  bufferSize_not: Int
  bufferSize_gt: Int
  bufferSize_lt: Int
  bufferSize_gte: Int
  bufferSize_lte: Int
  bufferSize_in: [Int!]
  bufferSize_not_in: [Int!]
  blocksPerDay: BigDecimal
  blocksPerDay_not: BigDecimal
  blocksPerDay_gt: BigDecimal
  blocksPerDay_lt: BigDecimal
  blocksPerDay_gte: BigDecimal
  blocksPerDay_lte: BigDecimal
  blocksPerDay_in: [BigDecimal!]
  blocksPerDay_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum _CircularBuffer_orderBy {
  id
  blocks
  windowStartIndex
  nextIndex
  bufferSize
  blocksPerDay
}